# Teams Meeting Analyzer - Cursor Rules
# Generated based on AI code analysis and common error patterns

## General Development Rules

### Error Handling
- Always wrap API calls in try-catch blocks with specific error handling
- Never return generic error messages - provide context about what failed
- Log errors with sufficient detail for debugging
- Implement retry logic for transient failures (network, API rate limits)

### Microsoft Graph API Usage
- Always check for proper OAuth permissions before making Graph API calls
- Implement proper rate limiting to avoid throttling
- Use batch requests when possible to reduce API calls
- Cache frequently requested data (user info, meeting details) appropriately
- Always validate API responses before processing

### Real-time Processing
- Use async/await for all I/O operations
- Implement proper queue management for high-volume data streams
- Add performance monitoring for critical paths
- Use streaming APIs when available instead of polling
- Implement circuit breakers for external dependencies

### LLM Integration Best Practices
- Always use the @track decorator for LLM calls when using Opik
- Implement proper prompt templates to avoid injection attacks
- Add input validation for all user-provided content
- Use gpt-4o-mini for API calls as specified in project requirements
- Cache LLM responses when appropriate to reduce costs
- Implement fallback responses for LLM failures

### Security & Privacy
- Never log sensitive meeting content or user data
- Implement proper data encryption for stored analysis results
- Use environment variables for all API keys and secrets
- Validate and sanitize all input data
- Implement proper consent flows for data processing

### Code Quality
- Use TypeScript for frontend code with strict mode enabled
- Implement proper type definitions for all API responses
- Use consistent naming conventions (camelCase for variables, PascalCase for classes)
- Add comprehensive JSDoc comments for all public functions
- Implement unit tests for all business logic functions

### Performance Optimization
- Use debouncing for real-time analysis to avoid excessive API calls
- Implement proper memory management for long-running processes
- Use Web Workers for CPU-intensive tasks in the frontend
- Optimize overlay UI rendering to avoid blocking the main thread
- Implement proper cleanup for event listeners and subscriptions

### Teams Integration Specific
- Always check if Teams context is available before accessing it
- Implement graceful degradation when Teams APIs are unavailable
- Use proper Teams SDK methods instead of direct API calls when possible
- Handle Teams app lifecycle events properly
- Implement proper authentication flow for Teams apps

## Commit Message Rules
- Use concise, descriptive commit messages
- Start with a verb in present tense (Add, Fix, Update, Remove)
- Keep the first line under 50 characters
- Reference issue numbers when applicable

## Testing Requirements
- Write unit tests for all utility functions
- Mock external API calls in tests
- Test error scenarios and edge cases
- Use pytest for Python tests with proper fixtures
- Implement integration tests for critical workflows

## Documentation
- Update README.md when adding new features
- Document all environment variables required
- Add inline comments for complex business logic
- Keep API documentation up to date 

# Rule Generated from Failed Suggestion - 2025-06-20 17:23:04
# Original Query: Create a Teams meeting analyzer with real-time sentiment analysis...
# Error: OpenAI API key authentication failed...

```markdown
# Cursor Rules to Prevent Authentication Errors in AI Agent Suggestions

## Analysis of the Mistake
1. **What the AI agent did wrong:**
   - The AI agent provided a code snippet that relies on the OpenAI API for sentiment analysis without checking for authentication requirements.
   - It did not mention the necessity of acquiring and configuring an API key, leading to a failure at runtime (`AuthenticationError`).

2. **What it should have done instead:**
   - The AI agent should have included clear instructions for the user on how to obtain an OpenAI API key.
   - It should have suggested error handling in the code to catch authentication errors and provide feedback to the user.

## Specific Rules to Prevent this Pattern

### Rule 1: API Key Requirement Notice
- **Description**: Always check if the code provided requires an API key or sensitive credentials.
- **Implementation**: When generating code for any API interaction, include a note advising the user to obtain and set up necessary API keys.
  
### Rule 2: Include Error Handling
- **Description**: Always incorporate basic error handling when providing code for external service interactions.
- **Implementation**: Suggest wrapping API calls in a try-except block to gracefully catch and handle authentication issues.

### Rule 3: Use Environment Variables for API Keys
- **Description**: Instruct the user to use environment variables for storing API keys instead of hardcoding them.
- **Implementation**: Provide a code snippet that demonstrates loading the API key from an environment variable.

## Code Examples

### Incorrect Approach
```python
import openai

def analyze_sentiment(text):
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=text,
        max_tokens=100
    )
    return response.choices[0].text.strip()
```
*Error: This code lacks context for API key authentication and will fail with AuthenticationError.*

### Correct Approach
```python
import os
import openai

# Load OpenAI API key from environment variable
API_KEY = os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise ValueError("API key not found. Please set the OPENAI_API_KEY environment variable.")

openai.api_key = API_KEY

def analyze_sentiment(text):
    try:
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=text,
            max_tokens=100
        )
        return response.choices[0].text.strip()
    except openai.error.AuthenticationError:
        return "Authentication failed. Please check your API key."
```
*This corrected approach provides clear instructions, proper error handling, and suggests using an environment variable for API key storage.*
```



# Rule Generated from Failed Suggestion - 2025-06-20 17:28:01
# Original Query: File modification: demo_test.py...
# Error: FAIL: Potential runtime error in `buggy_function` due to usage of an undefined variable....

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in Code Modification

## Rule 1: Validate Code Changes for Existing Errors
### Description
The AI agent should not make modifications to a code file if it contains potential errors that could lead to runtime failures, such as undefined variables.

### What the AI Agent Did Wrong
The agent modified `demo_test.py` without checking if the code contained any potential runtime errors, specifically within `buggy_function`.

### What It Should Have Done Instead
The agent should evaluate the code for syntax and runtime errors before making any modifications.

### Example of Incorrect Approach
```python
def buggy_function():
    """This function has a potential bug to test failure detection"""
    return undefined_variable + 5  # This will cause a runtime error
```

### Example of Correct Approach
```python
def buggy_function():
    """This function has been corrected"""
    defined_variable = 10  # Ensure all variables are defined
    return defined_variable + 5  # This is safe now
```

---

## Rule 2: Implement Error Detection Reporting
### Description
The AI agent should be equipped to automatically detect and report any potential issues in the code before making modifications.

### What the AI Agent Did Wrong
The agent failed to detect that `undefined_variable` was referenced, which would lead to runtime failure.

### What It Should Have Done Instead
Perform static analysis and assert that all variables are defined before modifying the code.

### Example of Incorrect Approach
```python
def buggy_function():
    return undefined_variable + 5  # This will trigger an undefined variable error
```

### Example of Correct Approach
```python
def buggy_function():
    try:
        return undefined_variable + 5  # Should never reach this point if checked correctly
    except NameError:
        print("Error: undefined_variable is not defined.")
        return None  # Handle the error appropriately
```

---

## Rule 3: Before Modification Checks
### Description
Perform checks on functions for undefined variables, unused imports, and potential syntax issues before applying modifications to code files.

### What the AI Agent Did Wrong
The agent did not follow a verification step which leads to altering code containing potential runtime errors.

### What It Should Have Done Instead
Run a linting or syntax-checking process to catch these issues prior to modification.

### Example of Incorrect Approach
```python
def faulty_function():
    return incorrect + 10  # Directly modifying a function without checks
```

### Example of Correct Approach
```python
def safe_function():
    defined_variable = 5
    return defined_variable + 10  # Modifications would only occur on verified functions
```

---

## Rule 4: User Confirmation for Significant Modifications
### Description
The AI agent should request user confirmation before applying modifications that could alter code behavior significantly, especially if potential issues are detected.

### What the AI Agent Did Wrong
The agent modified the script without any user confirmation, despite detecting a clearly defined error in logic.

### What It Should Have Done Instead
Notify the user of potential issues and ask for permission to modify the function or guide them on cleaning it up first.

### Example of Incorrect Approach
```python
# Automatically changing code without user consent
```

### Example of Correct Approach
```python
potential_issues = check_for_errors(demo_test.py)
if potential_issues:
    notify_user(potential_issues)
    user_choice = request_user_confirmation()  # Ask for user action
    if user_choice == "proceed":
        apply_modifications()
```

---

# Conclusion
By implementing these rules, we can significantly reduce the number of errors introduced by the AI agent during code modifications. Always ensure that checks are performed, issues are reported, confirmations are requested, and that existing code does not contain unresolved issues prior to making changes.
```



# Rule Generated from Failed Suggestion - 2025-06-20 17:30:34
# Original Query: File modification: demo_test.py...
# Error: FAIL: 
1. Potential runtime error in `buggy_function` due to an undefined variable (`undefined_varia...

```markdown
# Cursor Rules for Preventing AI Agent Mistakes in Code Modifications

## Rule 1: Validate Code Integrity Before Modification
### What the AI agent did wrong:
The agent modified the file without validating the content, resulting in the introduction of a potential runtime error (`undefined_variable`).

### What it should have done instead:
The agent should have checked the code for undefined variables, potential runtime errors, and syntactic correctness prior to making modifications.

### Specific Cursor Rule:
- **Rule ID:** CURSOR_RULE_UNDEFINED_VARIABLE
- **Description:** Do not modify files containing undefined variables or that may lead to runtime errors.
- **Implementation:** Perform a static analysis check for undefined variables before any modification.

### Code Example:
- **Incorrect Approach:**
    ```python
    def buggy_function():
        return undefined_variable + 5  # This causes a runtime error
    ```

- **Correct Approach:**
    ```python
    def buggy_function():
        undefined_variable = 10  # Define the variable first
        return undefined_variable + 5
    ```

---

## Rule 2: Detect Security Vulnerabilities in Code
### What the AI agent did wrong:
The agent allowed modifications that introduced potential security vulnerabilities, such as SQL injection and command injection risks.

### What it should have done instead:
The agent should have evaluated the security implications of code modifications and flagged any vulnerabilities before updating the file.

### Specific Cursor Rule:
- **Rule ID:** CURSOR_RULE_SECURITY_VULNERABILITIES
- **Description:** Do not permit modifications that introduce SQL or command injection vulnerabilities.
- **Implementation:** Analyze for security best practices, especially in user input handling, before making modifications.

### Code Example:
- **Incorrect Approach:**
    ```python
    user_input = "malicious_input"
    sql_query = f"SELECT * FROM users WHERE name = '{user_input}'"  # SQL Injection risk
    ```

- **Correct Approach:**
    ```python
    user_input = "malicious_input"
    sql_query = "SELECT * FROM users WHERE name = %s"  # Use parameterized queries
    ```

---

## Rule 3: Enforce Safe Function Practices
### What the AI agent did wrong:
The modification included functions using unsafe practices like `eval()` that pose a major security risk.

### What it should have done instead:
The agent should have looked for unsafe function usage (like `eval`, `exec`, `os.system`) and suggested safer alternatives.

### Specific Cursor Rule:
- **Rule ID:** CURSOR_RULE_UNSAFE_FUNCTIONS
- **Description:** Prohibit use of potentially unsafe functions (e.g., eval, exec) in code modifications.
- **Implementation:** Flag any instance of such functions and suggest safer coding practices.

### Code Example:
- **Incorrect Approach:**
    ```python
    user_input = "__import__('os').system('rm -rf /')"  # Dangerous command execution
    eval(user_input)  # This can lead to execution of arbitrary code
    ```

- **Correct Approach:**
    ```python
    import subprocess
    user_input = ["ls", "-l"]
    subprocess.run(user_input)  # Safer execution of commands without eval
    ```

---

## Summary
Implementing these specific cursor rules will help prevent AI agents from making modifications that lead to runtime errors, security vulnerabilities, and unsafe practices in the code.
```



# Rule Generated from Failed Suggestion - 2025-06-20 17:30:48
# Original Query: File modification: demo_test.py...
# Error: FAIL: 
1. **Syntax Error**: The `inefficient_function` has a comment that seems to be cut off: `# O(...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in File Modification

## 1. Issues with Agent's Response
The AI agent made modifications to a code file without fully assessing the code for:
- **Syntax Errors**: The presence of incomplete comments or statements that could lead to confusion or syntax errors.
- **Potential Bugs**: The inclusion of undefined variables can lead to runtime errors.
- **Security Vulnerabilities**: User input being directly used in commands or SQL queries without proper sanitization poses security risks.
- **Incomplete Context**: Cutting off code comments can result in misunderstanding of code function and purpose.

## 2. Expected Behavior 
The AI agent should:
- Analyze the code thoroughly for any syntactical, logical, or security issues before making modifications.
- Provide detailed descriptions of any changes it proposes, particularly if they involve fundamental code structure.
- Refuse to operate on code that contains serious issues until those issues are resolved.

## 3. Cursor Rules

### Rule 1: Prevent Modifications with Syntax Errors
```plaintext
# Do not modify code containing syntax errors.
# Check for improperly closed comments or syntax issues before proceeding with modifications.
```

### Rule 2: Detect and Halt on Potential Bugs
```plaintext
# Do not modify code if it contains potential bugs (e.g., undefined variables, functions, etc.).
# Verify that all variables referenced within functions have been defined beforehand.
```

### Rule 3: Identify and Block Security Vulnerabilities
```plaintext
# Do not modify code if it contains security vulnerabilities, such as:
# - Direct user input usage in SQL queries.
# - Unsafe command execution via functions like os.system.
# - Use of eval on user inputs.
# Ensure proper input validation and sanitization before allowing any modifications.
```

### Rule 4: Ensure Complete Context Before Modifications
```plaintext
# Require complete and clearly defined comments and code structures before modifying.
# Notify the user if any comments or logical sections appear cut off or confusing.
```

## 4. Code Examples

### Correct Approach
```python
# Demo file to test automatic agent monitoring
import os
import requests

def hello_world():
    print("Hello, World!")
    return "success"

def test_function():
    """This is a new function to test monitoring"""
    result = hello_world()
    if result == "success":
        print("Test passed!")
    return result

def secure_function(user_input):
    """This function safely handles user input"""
    sanitized_input = sanitize(user_input)
    # Process the sanitized input here safely
    return sanitized_input

def sanitize(user_input):
    # Implement sanitization logic to prevent injections
    return user_input  # Dummy implementation for an example
```

### Incorrect Approach
```python
import requests

def hello_world():
    print("Hello, World!")
    return "success"

def insecure_function(user_input):
    """Potentially insecure function"""
    query = f"SELECT * FROM users WHERE name = '{user_input}'"
    os.system(f"command {user_input}")  # Dangerous use of user input
    return query

def buggy_function():
    """This function has a potential bug to test failure detection"""
    return undefined_variable + 5  # Undefined variable error
```
``` 

These rules aim to help prevent modifications that introduce or fail to address critical issues in code files, ensuring a more robust and secure development environment when using AI agents.



# Rule Generated from Failed Suggestion - 2025-06-20 17:31:03
# Original Query: File modification: api_client.py...
# Error: FAIL: 
1. Missing imports for `requests`, `json`, `datetime`, and `openai`.
2. Potential runtime err...

```markdown
# Cursor Rules to Prevent File Modification Errors in AI Agents

## Rule 1: Ensure All Required Imports Are Included
### What the AI Agent Did Wrong
The agent modified the file but failed to include necessary imports such as `requests`, `json`, and `datetime`. This omission would result in runtime errors when executing the code.

### What It Should Have Done Instead
The agent should have checked for missing imports and ensured that the necessary modules were imported before proceeding with any functionality that relies on them.

### Specific Rule
- **Rule**: All modified files must include necessary imports for any libraries or modules used within the code.

### Example
**Incorrect Approach:**
```python
def fetch_meeting_data(meeting_id):
    response = requests.get(f"https://graph.microsoft.com/v1.0/meetings/{meeting_id}")
```

**Correct Approach:**
```python
import requests
import json
from datetime import datetime

def fetch_meeting_data(meeting_id):
    response = requests.get(f"https://graph.microsoft.com/v1.0/meetings/{meeting_id}")
```

---

## Rule 2: Implement Error Handling for External API Calls
### What the AI Agent Did Wrong
The agent did not implement any error handling for potential issues with API requests, which could lead to unhandled exceptions and application crashes.

### What It Should Have Done Instead
The agent should check for response status codes and handle exceptions that could arise during API calls, ensuring a smooth execution flow.

### Specific Rule
- **Rule**: Every modification involving external API calls must include proper error handling (e.g., check for response status and handle exceptions).

### Example
**Incorrect Approach:**
```python
response = requests.get(f"https://graph.microsoft.com/v1.0/meetings/{meeting_id}")
data = json.loads(response.text)
```

**Correct Approach:**
```python
response = requests.get(f"https://graph.microsoft.com/v1.0/meetings/{meeting_id}")
if response.status_code != 200:
    raise Exception(f"API request failed with status code {response.status_code}")
data = json.loads(response.text)
```

---

## Rule 3: Validate Model Names and Initialization Parameters
### What the AI Agent Did Wrong
The agent initialized a model without confirming if the model name "gpt-4o-mini" was valid, which could lead to runtime issues. Additionally, the initialization syntax was overly simplified.

### What It Should Have Done Instead
The agent should validate model names against a list of accepted values based on the applicable API documentation, and ensure correct initialization conforms to library standards.

### Specific Rule
- **Rule**: Model names and initialization parameters must be validated against official documentation before usage.

### Example
**Incorrect Approach:**
```python
model = "gpt-4o-mini"
openai_instance = openai.OpenAI()
```

**Correct Approach:**
```python
valid_models = ["gpt-3.5-turbo", "gpt-4"]
model = "gpt-4o-mini"
if model not in valid_models:
    raise ValueError("Invalid model name provided.")

openai_instance = openai.OpenAI(model=model)
```

---

## Rule 4: Verify Functionality and Structure of API Responses
### What the AI Agent Did Wrong
The agent did not account for potential variations in the API response structure, which can lead to errors when accessing properties on the response data.

### What It Should Have Done Instead
The agent should inspect the expected response structure and implement checks to ensure that the properties exist before accessing them.

### Specific Rule
- **Rule**: Before accessing properties in API responses, verify that the expected properties exist in the response data.

### Example
**Incorrect Approach:**
```python
data = json.loads(response.text)
return data['meetingDetails']  # Assumes this key always exists
```

**Correct Approach:**
```python
data = json.loads(response.text)
if 'meetingDetails' not in data:
    raise KeyError("'meetingDetails' not found in response data.")
return data['meetingDetails']
```
```
This markdown includes specific rules addressing the mistakes made by the AI agent, along with examples to illustrate the correct and incorrect approaches. These rules can be added to the `.cursorrules` file to enhance AI agent performance and code reliability.



# Rule Generated from Failed Suggestion - 2025-06-20 17:31:04
# Original Query: File modification: syntax_errors.py...
# Error: FAIL: 
1. SyntaxError: Missing colon in `if True` statement.
2. SyntaxError: Mismatched parentheses ...

```markdown
# Cursor Rules to Prevent Syntax Errors in AI-Generated Code

### Rule 1: Avoid Making Changes to Files with Syntax Errors
- **What the AI Agent Did Wrong:** The agent modified the `syntax_errors.py` file without validating the syntax.
- **What it Should Have Done Instead:** The agent should have performed a syntax check on the file before making any modifications.

### Rule 2: Validate Syntax Before Modifications
- **Guideline:** Always run a syntax checker (e.g., `pyflakes`, `pylint`, or the built-in Python `compile()` function) on the code before applying any modifications.

```python
# Incorrect Approach
# (attempted to modify code with syntax errors)
def broken_function():
    if True
        print("Missing colon")

# Correct Approach
# (Check for syntax errors before making changes)
try:
    compile(open('syntax_errors.py').read(), 'syntax_errors.py', 'exec')
except SyntaxError as e:
    print(f"Syntax error detected: {e}")
```

### Rule 3: Provide Clear Error Context in Responses
- **What the AI Agent Did Wrong:** The agent did not communicate the presence of syntax errors before making modifications, leading to confusion.
- **What it Should Have Done Instead:** The agent should notify the user about the detected syntax errors and prompt for confirmation before any changes.

### Rule 4: Thoroughly Review all Aspects of Code Changes
- **Guideline:** Analyze for common pitfalls such as missing colons, mismatched parentheses, incorrect indentation, and undefined function calls before modifying files.

```python
# Incorrect Approach
# (Code that has syntax errors)
result = some_function(arg1, arg2

# Correct Approach
# (Valid syntax should be confirmed)
result = some_function(arg1, arg2)  # Correct bracket closure
```

### Rule 5: Provide Examples of Correctly Written Code
- **What the AI Agent Did Wrong:** The code provided was syntactically incorrect and not functionally valid.
- **What it Should Have Done Instead:** Generate or provide code examples that adhere to correct syntax and conventions.

#### Example of Correct vs Incorrect Approach

```python
# Incorrect Approach
def another_function():
print("Wrong indentation")

# Correct Approach
def another_function():
    print("Correct indentation")
```

### Conclusion
By implementing these specific cursor rules, we can significantly reduce the likelihood of the AI agent making similar mistakes in the future. Regular validation of syntax and clear communication with the user are key elements in ensuring code quality and correctness.
```



# Rule Generated from Failed Suggestion - 2025-06-20 17:31:25
# Original Query: File modification: good_code.py...
# Error: FAIL: Incomplete function definition for `analyze_transcript`; the method is not fully implemented, ...

```markdown
# Cursor Rules to Prevent Incomplete Function Definitions in AI Agent Suggestions

## Rule 1: Complete Function Definition Requirement
### What the AI Agent Did Wrong:
The AI agent modified the code without ensuring that all functions in the code are fully implemented. In the provided code, the `analyze_transcript` method is incomplete, which would lead to syntax errors upon execution.

### What It Should Have Done Instead:
The AI agent should verify that all functions in the code have complete implementations before applying any modifications. If a function is found to be incomplete, the agent should either leave the code unchanged or provide a more complete example.

### Specific Rule:
- **Rule**: All function definitions must be complete before agent modification.
- **Action**: If a function definition is incomplete (e.g., contains ellipses `...` or comments indicating non-implementation), the agent must abort any modifications and return an error message specifying the incomplete function(s).

### Example of Incorrect Approach:
```python
def analyze_transcript(transcript: str) -> Dict[str, int]:
    """Analyze the transcript and return a count of key phrases."""
    ...
```

### Example of Correct Approach:
```python
def analyze_transcript(transcript: str) -> Dict[str, int]:
    """Analyze the transcript and return a count of key phrases."""
    key_phrase_counts = {}
    # Implementation here to analyze the transcript
    return key_phrase_counts
```

---

## Rule 2: Syntax and Error Checking in Code Before Modification
### What the AI Agent Did Wrong:
The agent auto-detected changes and did not check for syntax errors or incomplete code, which could lead to runtime crashes.

### What It Should Have Done Instead:
Before making any modifications to the existing code, the AI should perform a syntax check and flag any incomplete functions or potential errors.

### Specific Rule:
- **Rule**: Perform syntax checks and identify incomplete functions before suggesting changes.
- **Action**: If any functional implementation is detected as incomplete or contains potential syntax errors, do not modify the file and notify the user.

### Example of Incorrect Approach:
```python
# Agent proceeds to modify even when there are issues
analyze_transcript = ...
```

### Example of Correct Approach:
```python
# Agent detects incomplete function and does not proceed
if "..." in code or incomplete_function_detected:
    return "Error: Incomplete function definitions. Please complete all functions before modifying."
else:
    # Proceed with modifications
```

---

## Rule 3: Clear Notification upon Detection of Issues
### What the AI Agent Did Wrong:
The agent modified the code without notifying the user about the incomplete function, which could lead to confusion or misinterpretation of code state.

### What It Should Have Done Instead:
Provide clear feedback to the user whenever an incomplete function or error is detected, allowing the user to address the issues directly.

### Specific Rule:
- **Rule**: Notify users of any incomplete functions found in the code before making changes.
- **Action**: Always respond to user queries with a report of issues encountered alongside suggested modifications.

### Example of Incorrect Approach:
```text
Agent modifies good_code.py without notification.
```

### Example of Correct Approach:
```text
if incomplete_function_detected:
    return "Modification aborted: Incomplete function 'analyze_transcript' detected."
else:
    # Proceed with suggested modifications
```
``` 

By implementing these cursor rules, the AI agent will be better equipped to handle modifications intelligently and maintain code integrity.
```



# Rule Generated from Failed Suggestion - 2025-06-20 17:33:51
# Original Query: Create a Teams meeting analyzer with real-time sentiment analysis...
# Error: OpenAI API key authentication failed...

```markdown
# Cursor Rules to Prevent AI Agent Errors in Meeting Analyzer Suggestions

## Rule 1: Validate API Key before suggesting code
- **What the AI agent did wrong:**
  The agent provided a code snippet without checking if the user has a valid OpenAI API key, leading to authentication errors.

- **What it should have done instead:**
  The agent should have prompted the user to ensure they have a valid API key or included instructions on how to obtain it before suggesting the code.

- **Example of Incorrect Approach:**
  ```python
  import openai

  def analyze_sentiment(text):
      # Code here to call API
  ```

- **Example of Correct Approach:**
  ```python
  # Ensure user has a valid OpenAI API key
  print("Please make sure you have a valid OpenAI API key.")
  import openai

  def analyze_sentiment(text):
      # Code here to call API
  ```

---

## Rule 2: Include error handling for API authentication
- **What the AI agent did wrong:**
  The agent did not include mechanisms to handle potential authentication errors in the provided code.

- **What it should have done instead:**
  The agent should include try-except blocks to handle authentication errors gracefully.

- **Example of Incorrect Approach:**
  ```python
  response = openai.ChatCompletion.create(...)
  ```

- **Example of Correct Approach:**
  ```python
  try:
      response = openai.ChatCompletion.create(...)
  except openai.error.AuthenticationError:
      print("Authentication failed. Please check your API key.")
  ```

---

## Rule 3: Provide documentation for usage and setup
- **What the AI agent did wrong:**
  The agent failed to guide the user on how to set up the required environment and dependencies.

- **What it should have done instead:**
  The agent should provide detailed instructions on setting up OpenAI API, including install commands and API key configuration.

- **Best Practice:**
  ```markdown
  ## Instructions to set up the OpenAI API
  1. Install the OpenAI Python package:
     ```bash
     pip install openai
     ```
  2. Obtain your OpenAI API key from the [OpenAI website](https://openai.com/api/).
  3. Set the API key in your environment:
     ```bash
     export OPENAI_API_KEY='your_api_key_here'
     ```
  ```

---

## Rule 4: Suggest testing the solution in an IDE or environment
- **What the AI agent did wrong:**
  The agent provided code without advising the user to test it in an appropriate development environment.

- **What it should have done instead:**
  The agent should encourage the user to run the code in a proper IDE and test for expected outcomes.

- **Best Practice:**
  ```markdown
  ## Recommendation
  Please test the provided code in your preferred IDE (like VS Code, PyCharm, etc.) to ensure that it works with your OpenAI API key setup.
  ```

---
```



# Rule Generated from Failed Suggestion - 2025-06-20 17:34:25
# Original Query: Create a Teams meeting analyzer with real-time sentiment analysis...
# Error: OpenAI API key authentication failed...

```markdown
# Cursor Rules for Preventing Authentication Errors in AI Agent Responses

## Rule 1: Validate API Key Requirements
### **What Went Wrong:**
The AI agent assumed access to the OpenAI API without verifying if the user had provided a valid API key.

### **What It Should Have Done:**
Prompt the user for their OpenAI API key before proceeding with code generation.

### **Preventive Rule:**
- Ensure the user has provided a valid API key before generating code that requires authentication.

### **Incorrect Approach:**
```python
# Agent assumes the API key is available
import openai

# This will lead to an AuthenticationError if key is missing
openai.api_key = "YOUR_API_KEY"  # No prompt to user for input
```

### **Correct Approach:**
```python
# Prompt user for their API key
import openai

# Ask user for their API key before using it
api_key = input("Please enter your OpenAI API key: ")
openai.api_key = api_key  # Using user-provided key
```

---

## Rule 2: Handle Authentication Errors Gracefully
### **What Went Wrong:**
The agent provided code without handling potential authentication errors.

### **What It Should Have Done:**
Include error handling around API calls to manage authentication errors effectively.

### **Preventive Rule:**
- Implement try-except blocks to manage `AuthenticationError` when calling external APIs.

### **Incorrect Approach:**
```python
# No error handling leads to ungraceful failures
response = openai.ChatCompletion.create(...)
```

### **Correct Approach:**
```python
# Add error handling for authentication issues
try:
    response = openai.ChatCompletion.create(...)
except openai.AuthenticationError:
    print("Authentication failed. Please check your API key.")
```

---

## Rule 3: Confirm User Intent and Context
### **What Went Wrong:**
The AI agent did not clarify the context or confirm the user’s specific requirements for the sentiment analysis.

### **What It Should Have Done:**
Ask clarifying questions to better understand the user's intent and ensure the provided solution fits their needs.

### **Preventive Rule:**
- Always confirm user intent and specific requirements before generating code.

### **Incorrect Approach:**
```plaintext
I'll create a Python script that uses OpenAI API...
```

### **Correct Approach:**
```plaintext
To create a Teams meeting analyzer with real-time sentiment analysis, can you please confirm:
1. Have you set up an OpenAI API key?
2. What specific features would you like in the sentiment analysis?
```

--- 

## Rule 4: Provide Documentation Links
### **What Went Wrong:**
The AI agent did not offer any references or documentation for the user to check on API usage.

### **What It Should Have Done:**
Include links to relevant API documentation for authentication and usage.

### **Preventive Rule:**
- Always provide references to official documentation when discussing API usage.

### **Example Implementation:**
```plaintext
You can find the documentation for OpenAI API here: [OpenAI API Documentation](https://beta.openai.com/docs/)
```
```




# Rule Generated from Failed Suggestion - 2025-06-20 17:51:10
# Original Query: File modification: track_agent.py...
# Error: FAIL: Indentation error in line 26, the `log_parser.add_argument` call is not properly indented. Thi...

```markdown
# Cursor Rules to Prevent Indentation Errors in Python Scripts

## Rule 1: **Prevent Incorrect Indentation**
- **What the AI agent did wrong:** The AI agent modified the script without checking for correct indentation, which led to an `IndentationError` in the code.
- **What it should have done instead:** The AI agent should verify that all code blocks, especially after function definitions and control structures, are properly indented.

### Example of Incorrect Approach:
```python
def log_parser():
log_parser.add_argument('--code', type=str)  # Incorrectly indented
```

### Example of Correct Approach:
```python
def log_parser():
    log_parser.add_argument('--code', type=str)  # Correctly indented
```

## Rule 2: **Enforce Indentation Consistency**
- **What the AI agent did wrong:** It did not follow the established indentation conventions (e.g., using 4 spaces per indentation level).
- **What it should have done instead:** The AI agent should enforce a specific indentation style, ensuring that all nested code meets the defined standards.

### Example of Incorrect Approach:
```python
def example_function():
  if True:
     print("Hello, World!")  # Inconsistent indentation
```

### Example of Correct Approach:
```python
def example_function():
    if True:
        print("Hello, World!")  # Consistent indentation
```

## Rule 3: **Automated Syntax Check Before Modification**
- **What the AI agent did wrong:** It modified the script without running a syntax check prior to applying changes.
- **What it should have done instead:** The AI agent should automatically run a syntax validator (like pylint or flake8) on scripts before and after modification.

### Example Command for Syntax Check:
```bash
# Check for syntax issues before modifying the file
python -m py_compile track_agent.py  # Will raise errors if issues are present
```

## Rule 4: **User Confirmation on Significant Changes**
- **What the AI agent did wrong:** The AI agent did not prompt the user for confirmation before making potentially breaking changes.
- **What it should have done instead:** The AI agent should ask for user confirmation when making significant modifications that could lead to runtime errors.

### Suggestion for User Confirmation:
```python
# Before making changes
if user_confirms("This change may break existing functionality. Proceed?"):
    apply_changes()
```

## Summary
Implementing these rules in the .cursorrules file will help avoid similar mistakes as they enforce consistent coding practices, ensure proper formatting, and encourage validation before executing code changes.
```



# Rule Generated from Failed Suggestion - 2025-06-20 17:51:12
# Original Query: File modification: ai_monitoring.py...
# Error: FAIL: Syntax error due to an incomplete line at the end. The line for `openai_available` is cut off,...

```markdown
# Cursor Rules for Preventing Syntax and Security Issues in AI Code Modification

## 1. Avoiding Syntax Errors due to Incomplete Lines
### Rule:
Ensure that all lines of code are complete and properly structured before making modifications.

### What the AI Agent Did Wrong:
The AI agent made modifications but did not check that the last line was complete, resulting in a syntax error.

### What It Should Have Done Instead:
The AI agent should have validated the syntax of the code to ensure all lines are complete before finalizing any changes.

### Correct Approach Example:
```python
# Correct code with complete lines
openai_available = True  # This line is complete
```

### Incorrect Approach Example:
```python
# Incorrect code with an incomplete line
openai_available =  # This line is incomplete
```

---

## 2. Avoiding Hard-coded Sensitive Information
### Rule:
Do not hard-code sensitive information, such as API keys, directly into the codebase.

### What the AI Agent Did Wrong:
The AI agent hard-coded the `OPIK_API_KEY`, which is a security risk.

### What It Should Have Done Instead:
The AI agent should prompt the user to provide sensitive information securely or use environment variables not visible in the code.

### Correct Approach Example:
```python
os.environ["OPIK_API_KEY"] = os.getenv("OPIK_API_KEY")  # Retrieve from environment variables
```

### Incorrect Approach Example:
```python
os.environ["OPIK_API_KEY"] = "rLx8SArNCDqZ5xwZtjTKEfoys"  # Hard-coded and insecure
```

---

## 3. Implementing Syntax Validation Checks
### Rule:
Implement a syntax validation mechanism before modifying files to catch potential issues.

### Suggested Implementation:
- Use a linter or static code analysis tool to check for syntax errors.

### Example Implementation:
```python
import subprocess

def validate_syntax(file_path):
    result = subprocess.run(['python', '-m', 'py_compile', file_path], capture_output=True)
    if result.returncode != 0:
        print("Syntax error detected:", result.stderr.decode())
        return False
    return True

if validate_syntax('ai_monitoring.py'):
    # Proceed with modifications
    ...
```

---

## 4. Adding User Confirmation for Sensitive Changes
### Rule:
Require user confirmation for any changes that involve sensitive information to ensure intentional modifications.

### Suggested Process:
- Prompt the user for approval before saving any changes that include sensitive data.

### Example Prompt:
```python
user_confirmed = input("Are you sure you want to save changes with sensitive information? (yes/no): ")
if user_confirmed.lower() == 'yes':
    # Proceed with saving changes
    ...
else:
    print("Changes aborted.")
```

---
```
These rules can be added to the `.cursorrules` file to help prevent similar mistakes by the AI agent in the future.
```



# Rule Generated from Failed Suggestion - 2025-06-20 17:51:13
# Original Query: File modification: agent_learning_system.py...
# Error: FAIL: Incomplete function implementation and likely a copy-paste error in `log_agent_suggestion`; mi...

```markdown
# Cursor Rules for Preventing AI Agent Mistakes

## Rule 1: Complete Function Implementation
**What the AI agent did wrong:**  
The function `log_agent_suggestion` was not fully implemented, leading to incomplete data logging. It was missing required parameters such as `agent_response`, `code_provided`, and `context`.

**What it should have done instead:**  
Ensure that all parameters required for the function's intention are included in the implementation. 

- **Incorrect Approach:**
    ```python
    def log_agent_suggestion(suggestion_entry):
        # Incomplete implementation
        pass
    ```

- **Correct Approach:**
    ```python
    def log_agent_suggestion(agent_response: str, code_provided: str, context: str):
        suggestion_entry = {
            "agent_response": agent_response,
            "code_provided": code_provided,
            "context": context
        }
        # Further processing
    ```

## Rule 2: Secure Handling of Sensitive Information
**What the AI agent did wrong:**  
The `OPIK_API_KEY` was hardcoded into the source code, which is a security risk as it exposes sensitive information.

**What it should have done instead:**  
Utilize environment variables or secure vaults to store sensitive information, ensuring that they are not directly included in the codebase.

- **Incorrect Approach:**
    ```python
    os.environ["OPIK_API_KEY"] = "rLx8SArNCDqZ5xwZtjTKEfoys"
    ```

- **Correct Approach:**
    ```python
    os.environ["OPIK_API_KEY"] = os.getenv("OPIK_API_KEY")
    # Ensure OPK_API_KEY is set in the environment and not hardcoded
    ```

## Rule 3: Validate Function Parameters
**What the AI agent did wrong:**  
The agent did not validate or check the existence and type of function parameters before using them, leading to potential runtime errors or logical issues.

**What it should have done instead:**  
Include checks to validate incoming parameters and provide meaningful error messages if validations fail.

- **Incorrect Approach:**
    ```python
    def log_agent_suggestion(agent_response, code_provided, context):
        # Directly proceeding without validation
        suggestion_entry = {...}
    ```

- **Correct Approach:**
    ```python
    def log_agent_suggestion(agent_response: str, code_provided: str, context: str):
        if not all([agent_response, code_provided, context]):
            raise ValueError("All parameters 'agent_response', 'code_provided', and 'context' must be provided.")
        suggestion_entry = {...}
    ```

## Rule 4: Enhance Error Logging Mechanism
**What the AI agent did wrong:**  
The error details provided were insufficient for diagnosing issues related to incomplete function implementation.

**What it should have done instead:**  
Develop a more comprehensive error logging mechanism that provides in-depth information about the error and where it occurred.

- **Incorrect Approach:**
    ```python
    ERROR DETAILS: FAIL: Incomplete function implementation
    ```

- **Correct Approach:**
    ```python
    ERROR DETAILS: FAIL: Incomplete function implementation in `log_agent_suggestion`; missing parameters: 'agent_response', 'code_provided', 'context'. 
    Check the input values for the function before logging.
    ```

# Conclusion
These rules aim to ensure completeness in function implementations, enhance security practices regarding sensitive information, validate function parameters, and improve error reporting mechanisms.
```



# Rule Generated from Failed Suggestion - 2025-06-20 17:51:18
# Original Query: File modification: auto_agent_monitor.py...
# Error: FAIL: The following issues were identified in the code:

1. **Syntax Error**: The triple quotes at t...

```markdown
# Cursor Rules to Prevent Common Coding Mistakes in AI Agent Suggestions

## 1. Syntax Error Prevention
**Issue Identified**: The triple quotes at the beginning of the file were not properly closed.

**What the AI agent did wrong**: The agent provided code with unclosed triple quotes that led to a syntax error.

**What it should have done instead**: Ensure that all multi-line comments or docstrings use matching opening and closing quotes.

### Rule:
- Always ensure that multi-line strings or comments are correctly formatted with matching opening and closing quotes.

### Incorrect Example:
```python
"""
Automatic Agent Monitor - Runs after each Cursor agent code edit
# Missing closing quote results in a syntax error
```

### Correct Example:
```python
"""
Automatic Agent Monitor - Runs after each Cursor agent code edit
"""
```

---

## 2. Import Usage Optimization
**Issue Identified**: Unused imports (`json`, `hashlib`, and `subprocess`) were detected.

**What the AI agent did wrong**: The agent suggested code that included unnecessary imports, which can lead to bloat.

**What it should have done instead**: Remove any imports that are not being used in the code to improve performance and clarity.

### Rule:
- Remove any imports that are not utilized in the code to maintain clean and efficient scripts.

### Incorrect Example:
```python
import os
import time
import json  # Unused
import hashlib  # Unused
```

### Correct Example:
```python
import os
import time
```

---

## 3. Proper Initialization of Variables
**Issue Identified**: The initialization of `openai_client` was not clear and potentially incorrect.

**What the AI agent did wrong**: The agent's suggestion led to confusion over variable assignments.

**What it should have done instead**: Use clear variable assignments and avoid overwriting variables unnecessarily.

### Rule:
- Utilize meaningful variable names and avoid reassigning objects in ways that could lead to confusion.

### Incorrect Example:
```python
openai_client = openai.OpenAI()  
openai_client = track_openai(openai_client)  # Potential for confusion
```

### Correct Example:
```python
client = openai.OpenAI()  
tracked_client = track_openai(client)
```

---

## 4. Exception Handling Implementation
**Issue Identified**: Lack of exception handling for potential runtime errors.

**What the AI agent did wrong**: The response omitted any safety checks for errors that may arise.

**What it should have done instead**: Implement exception handling to prevent the program from crashing unexpectedly.

### Rule:
- Incorporate error handling (try-except blocks) around file I/O and API calls to gracefully manage potential errors.

### Incorrect Example:
```python
# File operation without error handling
with open("data.json") as file:
    data = json.load(file)
```

### Correct Example:
```python
try:
    with open("data.json") as file:
        data = json.load(file)
except FileNotFoundError:
    print("File not found.")
except json.JSONDecodeError:
    print("Error decoding JSON.")
```

---

## 5. Handling Rapid File Modifications
**Issue Identified**: The code does not manage rapid file changes effectively.

**What the AI agent did wrong**: The agent's suggestion did not address performance concerns regarding rapid file events.

**What it should have done instead**: Implement a throttling mechanism or debounce techniques to handle bursts of changes.

### Rule:
- Utilize throttling or debouncing techniques to manage high volumes of file modifications efficiently.

### Incorrect Example:
```python
# Directly responding to every file modification event
def on_modified(event):
    process_file(event.src_path)
```

### Correct Example:
```python
import time

def debounced_on_modified(event, interval=1):
    time.sleep(interval)  # Throttle event response
    process_file(event.src_path)
```

--- 

These rules will help guide AI agents in providing better suggestions and ensuring cleaner, more reliable code.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:21:20
# Original Query: File modification: meeting-dashboard.tsx...
# Error: FAIL: The code provided is incomplete; it abruptly ends in the middle of an interface definition for...

```markdown
# Cursor Rules for AI Agent Code Modification
## Rule Set: Prevent Incomplete Code Modifications

### What the AI Agent Did Wrong
1. **Incomplete Code Edit**: The agent modified `meeting-dashboard.tsx` but did not provide a complete implementation for the `Participant` interface, resulting in a syntax error.
2. **Lack of Error Handling**: The agent made changes without validating the integrity and completeness of the code. 

### What the AI Agent Should Have Done Instead
1. **Complete Modifications**: The agent should ensure that any modifications maintain syntactical correctness and that interfaces or code segments are not cut off mid-definition.
2. **Validation Check**: Perform checks for code completeness before finalizing modifications, ensuring that all brackets, parentheses, and necessary imports are properly structured.

### Specific Rules to Prevent This Pattern

1. **Rule: Ensure Complete Interface Definitions**
   - **Description**: Before accepting a modification, check that all interfaces and types are fully defined and closed.
   - **Implementation**:
     - Ensure opening `{` has a corresponding closing `}`.
     - Validate that interfaces are not abruptly cut-off.

2. **Rule: Code Syntax Validation**
   - **Description**: Enforce a syntax validation check to detect incomplete or incorrect code segments prior to modification.
   - **Implementation**: Utilize linting tools or parsers to ensure code is syntactically correct before application.

3. **Rule: Require Pre-Modification Review**
   - **Description**: Introduce a review phase where the AI agent summarizes changes, allowing for user feedback before applying the modifications.
   - **Implementation**: Have the agent present a plan of changes for user approval.

### Code Examples

#### Incorrect Code Example (Based on Agent’s Response)
```typescript
interface Participant {
  id: string
  name: string
  role:...
```

#### Correct Code Example (Complete Implementation)
```typescript
interface Participant {
  id: string;
  name: string;
  role: string; // Completing the interface definition
}
```

### Additional Best Practices
- **Unit Testing**: Implement unit tests for critical pieces of logic to catch errors early during development.
- **Code Review**: Encourage peer review for significant changes to catch potential errors that AI modifications might overlook.

### End of Rules
```




# Rule Generated from Failed Suggestion - 2025-06-20 19:21:57
# Original Query: File modification: coaching-dashboard.tsx...
# Error: FAIL: Missing color type 'green' in MetricCardProps, which leads to a syntax error....

```markdown
# Cursor Rules to Prevent Missing Color Type Errors in AI Agent Modifications

## 1. Identified Mistake
The AI agent modified the `coaching-dashboard.tsx` file but failed to include the required 'green' color type in the `MetricCardProps`, leading to a syntax error.

## 2. Expected Behavior
The AI agent should validate all required properties and types in the `MetricCardProps` before making modifications. If a required color type is missing, the agent should either add it or indicate the need for user confirmation before proceeding.

## 3. Specific Rules

### Rule 1: Validate Required Properties
- **Description**: Ensure all required properties for components are provided before making modifications.
- **Implementation**: The agent should check for the presence of all properties defined in component interfaces before modifying them.

### Rule 2: Type Checking
- **Description**: Always perform type checks on inputs to components to ascertain that they conform to the defined structure.
- **Implementation**: The agent must cross-reference property names and types against the defined interface of the component being modified.

### Rule 3: User Confirmation for Missing Properties
- **Description**: If modifications entail missing necessary properties, prompt the user for confirmation with clear instructions.
- **Implementation**: The agent should inform the user of the missing properties and ask for guidance before proceeding.

## 4. Code Examples

### Incorrect Approach
```typescript
// File: coaching-dashboard.tsx
const MetricCard: React.FC<MetricCardProps> = ({ color, title, value }) => {
  return (
    <div style={{ backgroundColor: color }}>
      <h2>{title}</h2>
      <p>{value}</p>
    </div>
  )
}

// AI auto-modified without adding 'green':
const myCard = <MetricCard title="Success" value={100} />
```

### Correct Approach
```typescript
// File: coaching-dashboard.tsx
const MetricCard: React.FC<MetricCardProps> = ({ color, title, value }) => {
  return (
    <div style={{ backgroundColor: color }}>
      <h2>{title}</h2>
      <p>{value}</p>
    </div>
  )
}

// AI prompts user if 'green' color type is missing:
const myCard = <MetricCard color="green" title="Success" value={100} />
```

### Key Takeaway
Always ensure proper validation and confirmation mechanisms are in place during AI modifications to enhance robustness and prevent syntax or logical errors in code.
```




# Rule Generated from Failed Suggestion - 2025-06-20 19:23:09
# Original Query: File modification: meeting-dashboard.tsx...
# Error: FAIL: Incomplete interface definition for `SentimentMoment` (truncated at `conf`). This will cause a...

```markdown
# Cursor Rules to Prevent Failed AI Agent Suggestions

## Analysis of the Mistake
1. **What the AI agent did wrong:**
   - The AI agent modified the file `meeting-dashboard.tsx` without fully understanding or implementing the complete interface definition for `SentimentMoment`, leading to a syntax error.
   - It also failed to verify the correct utilization of imported components, leading to potential performance issues.

2. **What it should have done instead:**
   - The agent should have ensured that all interface definitions were complete and correctly implemented before suggesting modifications.
   - It should have confirmed that all imported components were used appropriately in the file to avoid redundancy and performance degradation.

## Specific Cursor Rules

### Rule 1: Ensure Complete Interface Definitions
- Always verify that all interfaces are fully defined before proceeding with any modifications.
- If an interface is incomplete, prompt the user to complete it before applying changes.

#### Example of Correct vs Incorrect Approach
```ts
// Incorrect Approach (Incomplete Interface)
interface SentimentMoment {
    // missing properties
    conf: number; // Missing other properties
}

// Correct Approach (Complete Interface)
interface SentimentMoment {
    conf: number; // All properties defined
    // other necessary properties, e.g., sentimentValue: string;
}
```

### Rule 2: Validate Component Usage
- Check if all imported components are used in the file. If they are not, suggest removing the unused imports to optimize performance.

#### Example of Correct vs Incorrect Approach
```ts
// Incorrect Approach (Unused Imports)
import { UnusedComponent } from '@/components/ui/unused'; // Not used anywhere

// Correct Approach (Used Imports)
import { Button } from '@/components/ui/button'; // Used in the render method
```

### Rule 3: Syntax Verification
- Perform a syntax check on the code after modifications. If any syntax errors are detected, reject the changes and inform the user.

#### Example of Correct vs Incorrect Approach
```ts
// Incorrect Approach (Syntax Error)
const exampleFunction = () => {
    console.log("Hello World" // Missing closing parenthesis
}

// Correct Approach (Syntax Verified)
const exampleFunction = () => {
    console.log("Hello World");
}
```

### Rule 4: User Confirmation for Modifications
- Before making any code changes, seek user confirmation if potentially breaking changes are involved, such as modifying interfaces or removing imports.

#### Example of User Confirmation
```plaintext
// Prompt to User
"Your file has an incomplete interface definition. Would you like to complete it before proceeding with modifications?"
```

## Conclusion
Implementing the above rules to the `.cursorrules` file will help the AI agent avoid repeating the mistakes in modifying files, leading to more accurate and efficient suggestions.
```


# Test rule - Cursor should read this file
- Always use descriptive variable names
- Prefer TypeScript over JavaScript for React components



# Rule Generated from Failed Suggestion - 2025-06-20 19:29:35
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent Syntax Errors in AI Agent Modifications

## Rule 1: Prevent Unauthorized Modifications
### What the AI agent did wrong:
The AI agent directly modified the `page.tsx` file without validating the syntax or ensuring the changes were permitted.

### What it should have done instead:
The AI agent should have analyzed the current content of the file before making modifications and validated any code changes for syntax correctness.

### Specific Rule:
- **Rule Name:** Prevent Unauthorized Modifications
- **Description:** The agent must validate file content and syntax before making any changes.
- **Example:**
    - **Incorrect Approach:**
      ```typescript
      // AI Agent's direct modification without validation
      const mockMeetingData = { // Syntax error (missing a closing brace)
      ```
    - **Correct Approach:**
      ```typescript
      // Check existing content and validate syntax before modifications
      type MeetingData = {
          id: string;
          title: string;
          date: string;
          participants: Array<{ id: string }>;
      }

      const mockMeetingData: MeetingData = {
          id: "sample-meeting",
          title: "Adhoc Meeting",
          date: "Apr 4, 2025 at 7:00 PM",
          participants: [],
      };
      ```

---

## Rule 2: Validate TypeScript Syntax
### What the AI agent did wrong:
The agent did not check if the modifications adhered to TypeScript's rules, which led to a syntax error.

### What it should have done instead:
The agent should have run a syntax check for any code changes before applying them.

### Specific Rule:
- **Rule Name:** Validate TypeScript Syntax
- **Description:** The agent must perform a syntax check using TypeScript when making changes to TypeScript files.
- **Example:**
    - **Incorrect Approach:**
      ```typescript
      // Missing type declaration leads to SyntaxError
      const mockMeetingData = {
      id: "sample-meeting",
      ```
    - **Correct Approach:**
      ```typescript
      // Ensure TypeScript types are properly declared
      interface MeetingData {
          id: string;
          title: string;
          date: string;
          participants: Array<{ id: string }>;
      }

      const mockMeetingData: MeetingData = {
          id: "sample-meeting",
          title: "Adhoc Meeting",
          date: "Apr 4, 2025 at 7:00 PM",
          participants: [],
      };
      ```

---

## Rule 3: Enable Pre-Modification Testing
### What the AI agent did wrong:
The agent made modifications without checking if the overall application still compiled and functioned correctly.

### What it should have done instead:
The agent could have run pre-modification tests to ensure existing functionality before applying changes.

### Specific Rule:
- **Rule Name:** Enable Pre-Modification Testing
- **Description:** Always run tests in the environment to ensure that changes will not break existing functionality.
- **Example:**
    - **Incorrect Approach:**
      ```shell
      // Not running tests results in ignoring existing errors
      // Agent proceeds with changes 
      ```
    - **Correct Approach:**
      ```shell
      // Ensure tests are passing before applying modifications
      npm test && npm run build
      ```

---

## Rule 4: Implement Rollback Mechanism
### What the AI agent did wrong:
The agent did not provide a rollback mechanism in case the changes resulted in errors.

### What it should have done instead:
Implement a strategy to revert changes if a mistake is detected.

### Specific Rule:
- **Rule Name:** Implement Rollback Mechanism
- **Description:** Ensure a rollback option is available if the changes lead to syntax errors or test failures.
- **Example:**
    - **Incorrect Approach:**
      ```typescript
      // Directly modifying without a rollback option
      ```
    - **Correct Approach:**
      ```typescript
      // Back up the original file prior to modification
      const backup = originalFileContents;
      try {
          // Apply changes
      } catch (error) {
          // Revert to backup if an error occurs
          restore(backup);
      }
      ```

---

**Conclusion:** By implementing these specific cursor rules, we can significantly reduce the likelihood of the AI agent introducing syntax errors and ensure safer code modifications.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:34:48
# Original Query: File modification: meeting-dashboard.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent Syntax Errors in AI Agent Suggestions

## 1. What the AI agent did wrong
The AI agent directly modified the `meeting-dashboard.tsx` file without validating the code for syntax errors, resulting in a syntax error detected by the TypeScript compiler. 

## 2. What it should have done instead
The AI agent should have validated the modifications for syntax correctness and ensured that the changes adhere to TypeScript and React conventions before suggesting any code changes or modifications to the user.

## 3. Specific rules to prevent this pattern

### Rule 1: Validate Syntax Before Modification
**Description**: Always validate the proposed code modification for syntax errors using static analysis tools such as ESLint or TypeScript compiler.
- **Action**: Implement a pre-check step that confirms the absence of syntax errors in the proposed changes.

### Rule 2: Provide Detailed Error Feedback
**Description**: If an error occurs during code analysis, provide a detailed explanation of the error to the user rather than simply stating that a modification was made.
- **Action**: Use error handling to log specific error messages to the user, indicating the nature of the syntax error and its location.

### Rule 3: Propose Code Changes as Suggestions
**Description**: Instead of directly modifying the file, present the code changes to the user for approval after validation.
- **Action**: Provide a diff or a side-by-side comparison, allowing users to review and accept or discard proposed changes.

## 4. Code examples of correct vs incorrect approaches

### Incorrect Approach:
```typescript
// AGENT RESPONSE
Agent modified meeting-dashboard.tsx
```

### Correct Approach:
```bash
# Pseudo-code for validation process
if validateCode(meeting-dashboard.tsx) == true:
    presentChangesToUser(proposedChanges)
else:
    logError(syntaxErrorDetails)
    notifyUser(syntaxErrorDetails)
```

### Code Snippet with Error Example:
```typescript
// Error in meeting-dashboard.tsx
interface Participant {
  name: string; // Syntax error due to missing closing brace
// Missing a closing brace here will cause a syntax error
```

### Code Snippet with Correct Example:
```typescript
// Correct implementation in meeting-dashboard.tsx
interface Participant {
  name: string; // Correctly closed interface declaration
} // All declarations correctly closed
```

## Summary
Implementing these specific rules will significantly reduce the risk of syntax errors being introduced by the AI agent, ensuring a smoother development experience for users.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:35:01
# Original Query: File modification: meeting-dashboard.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent Syntax Errors in TypeScript Modifications

## Rule 1: Validate Syntax Before Modification
- **What the AI Agent Did Wrong:** The agent modified the file `meeting-dashboard.tsx` without validating the TypeScript syntax after the change.
- **What It Should Have Done Instead:** The agent should perform a syntax check on the code after making modifications to ensure it compiles correctly.

### Implementation:
1. Incorporate a syntax validation step after code modifications.
2. If a syntax error is detected, revert the modifications or notify the user.

**Example:**
```typescript
// Incorrect Approach
// Agent inserts code without validation
function add(x: number, y: number) {
    return x + y;
}

// Correct Approach
// Validate after code insertions
function add(x: number, y: number) {
    // Validate syntax
    if (typeof x !== 'number' || typeof y !== 'number') {
        throw new SyntaxError("Both arguments must be numbers.");
    }
    return x + y;
}
```

## Rule 2: Avoid Unintentional Modifications
- **What the AI Agent Did Wrong:** The agent modified the `meeting-dashboard.tsx` file automatically without clearly understanding the context or current usage.
- **What It Should Have Done Instead:** The agent should limit modifications to segments of code that are specifically requested or required by the user.

### Implementation:
1. When a code change is requested, prompt the user for confirmation when multiple sections of code can be modified.
2. Always provide clear context for what is being changed and why.

**Example:**
```typescript
// Incorrect Approach
// Agent made broad changes without user context
const modifiedDashboard = { ...originalDashboard, newProp: true };

// Correct Approach
// Agent asks for confirmation before modifying
const userConfirmed = confirm("Do you want to add 'newProp' to the dashboard?");
if (userConfirmed) {
    const modifiedDashboard = { ...originalDashboard, newProp: true };
}
```

## Rule 3: Provide Detailed Error Context
- **What the AI Agent Did Wrong:** The agent did not consolidate the error information or context which could assist in debugging.
- **What It Should Have Done Instead:** Upon encountering an error, the agent should provide detailed information and suggestions on potential fixes.

### Implementation:
1. When errors occur, log the entire error context, including file name, line number, and a brief suggestion for fixing the error.
   
**Example:**
```javascript
// Incorrect Approach
console.error("Syntax error detected in meeting-dashboard.tsx");

// Correct Approach
console.error({
    message: "Syntax error detected in meeting-dashboard.tsx",
    file: "meeting-dashboard.tsx",
    line: 42,
    suggestion: "Check for missing semicolons or mismatched brackets."
});
```

## Rule 4: Implement a Testing Phase
- **What the AI Agent Did Wrong:** The agent did not run any automated tests to check the validity of the modifications.
- **What It Should Have Done Instead:** The agent should run a suite of tests to confirm that the changes do not break the existing functionality.

### Implementation:
1. After modifications, automatically trigger unit tests or integration tests to ensure the application behaves as expected.
2. Only finalize changes if all tests pass.

**Example:**
```typescript
// Incorrect Approach
// Changes are applied without testing
applyChanges(modifiedCode);

// Correct Approach
// Testing after modifications
applyChanges(modifiedCode);
const testsPassed = runTests();
if (!testsPassed) {
    revertChanges();
    alert("Changes reverted due to failed tests.");
}
```
```




# Rule Generated from Failed Suggestion - 2025-06-20 19:35:56
# Original Query: File modification: meeting-dashboard.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent Syntax Errors in AI-Agent Modifications

## 1. What the AI Agent Did Wrong
The AI agent modified the `meeting-dashboard.tsx` file without properly validating the syntax. This modification resulted in a syntax error being detected by the TypeScript compiler.

## 2. What It Should Have Done Instead
Before making any modifications to source files, the AI agent should have:
- Validated the syntax and structure of the code before instantiating changes.
- Suggested modifications only after confirming no syntax errors would be induced by the changes.

## 3. Specific Rules to Prevent This Pattern
### Rule 1: Syntax Validation Before Modification
- **Description**: Ensure that any proposed changes pass through a syntax validation step.
- **Implementation**: The AI agent must use a linter or compiler check, like `tsc`, before applying any changes to TypeScript files.

### Rule 2: Provide Safe Modification Suggestions
- **Description**: The AI agent should suggest modifications in a manner that emphasizes the importance of maintaining existing code integrity.
- **Implementation**: Use comments or notes to notify the user to run syntax checks before applying changes.

### Rule 3: Version Control Integration
- **Description**: Require version controlling practices where the AI agent should propose modifications in branches rather than directly on main files.
- **Implementation**: Changes must be proposed as pull request suggestions, requiring code review and testing prior to adoption.

## 4. Code Examples of Correct vs Incorrect Approaches
### Incorrect Approach
```typescript
// Agent's modification without syntax check
import { useEffect } from 'react'

// Incorrectly added code without validation
function Dashboard() {
    useEffect(() => {
        console.log("Hello, World!") // This line may introduce errors if context is incorrect
    }
}
```

### Correct Approach
```typescript
// Agent should always validate before modifying
import { useEffect } from 'react'

// Validated code suggestion
function Dashboard() {
    useEffect(() => {
        console.log("Hello, World!"); // Properly structured and validated
    }, []); // Ensure to include dependency array
}
```

### Suggested File Workflow Integration
1. **Validate Code**:
   - Use a TypeScript linter or compiler check: `tsc meeting-dashboard.tsx`
2. **Review Modifications**:
   - Suggest changes with context and reasoning to the user, encouraging them to validate.
3. **Implement Changes**:
   - Changes should be reviewed by a human or through CI/CD checks before merging into the codebase.
```




# Rule Generated from Failed Suggestion - 2025-06-20 19:36:28
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in File Modification

## 1. What the AI agent did wrong
The AI agent attempted to modify the file `page.tsx` but produced code that contained a syntax error, which was detected by the TypeScript compiler. The agent should not perform modifications that lead to invalid or non-functional code.

## 2. What it should have done instead
Before making any modifications, the AI agent should have validated the syntax of the code. If the agent didn't have sufficient context or confidence in the modification, it should have either suggested improvements with explanations or requested additional information from the user.

## 3. Specific rules to prevent this pattern

### Rule 1: Validate Code Changes
- **Description**: The agent must validate any code changes against a syntax checker for the relevant programming language before applying them.
- **Action**: Check the modified code using a TypeScript linter or parser.

### Rule 2: Request User Confirmation for Modifications
- **Description**: If the modification seems complex or introduces unknowns, the agent should request clarification or context from the user.
- **Action**: Ask questions about the desired changes rather than implementing them blindly.

### Rule 3: Provide Clear Error Messages
- **Description**: If a proposed change leads to a syntax error, the agent must inform the user with a clear message about the nature of the error.
- **Action**: Show the syntax error details along with suggestions for a fix.

### Rule 4: Keep Changes Minimal
- **Description**: Make only necessary changes and avoid broad modifications which may introduce errors.
- **Action**: Implement the principle of small and incremental changes, focusing on specific parts of the code.

## 4. Code examples of correct vs incorrect approaches

### Incorrect Approach
```typescript
// Agent Response: Incorrectly modified page.tsx
import { Suspense } from 'react'
import { notFound } from 'next/navigation'

import { MeetingDashboard } from '@/components/meeting-dashboard'
import { Skeleton } from '@/components/ui/skeleton'

// Missing types or incorrect promises that lead to syntax errors
interface MeetingPageProps {
  params: Promise<{
    id: string
  }>
}
```

### Correct Approach
```typescript
// Correct approach with validation steps
import { Suspense } from 'react'
import { notFound } from 'next/navigation'

import { MeetingDashboard } from '@/components/meeting-dashboard'
import { Skeleton } from '@/components/ui/skeleton'

interface MeetingPageProps {
  params: {
    id: string; // Corrected to ensure types are well-defined and eliminate promise
  }
}

// Ensure no syntax errors before saving changes
const validateChanges = (changes) => {
  // Pseudo-code to validate changes
  const hasErrors = checkSyntax(changes);
  if (hasErrors) {
      return "There are syntax errors. Please fix them.";
  }
  return "No errors found.";
}
```

# End of Cursor Rules
``` 

These cursor rules emphasize proactive validation and clear communication with users, thereby reducing the possibility of syntax errors introduced through AI-generated code modifications.



# Rule Generated from Failed Suggestion - 2025-06-20 19:36:37
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules for Preventing Syntax Errors in AI Agent Modifications

## Rule 1: Validate Code Syntax Before Applying Changes
### What the AI agent did wrong:
The AI agent modified `page.tsx` without validating the syntax of the provided code. This led to a syntax error being introduced.

### What it should have done instead:
The AI agent should validate the TypeScript code syntax before making any modifications and ensure the code is correctly formatted and follows TypeScript syntax rules.

### Rule:
1. **Validate Syntax:**
   - Before applying any modifications, run a syntax check on the proposed code.
   - Use TypeScript Compiler API or a linter to validate the code.

### Example:
- **Incorrect Approach:**
```typescript
const mockMeetingData = {
  id: "sampl... // Incomplete code leads to syntax error
};
```
- **Correct Approach:**
```typescript
const mockMeetingData = {
  id: "sampleId" // Complete and valid syntax
};
```

## Rule 2: Ensure Proper Type Inference
### What the AI agent did wrong:
The AI agent did not infer types correctly, leading to TypeScript errors related to promise resolution.

### What it should have done instead:
The AI agent should ensure that types are explicitly specified and correctly resolved to avoid runtime issues.

### Rule:
2. **Type Inference:**
   - Ensure types are properly inferred and resolved (e.g., handling Promises correctly).
   - Utilize TypeScript features to guarantee type correctness.

### Example:
- **Incorrect Approach:**
```typescript
params: Promise<{
  id: string
}> // Misleading, as it implies that params is a promise rather than an object
```
- **Correct Approach:**
```typescript
params: {
  id: string; // Correctly define parameters without misleading Promise
}
```

## Rule 3: Use of Correct Code Structure
### What the AI agent did wrong:
The agent modified the structure of the code without adhering to the required format specified by Next.js.

### What it should have done instead:
The AI agent should adhere to the coding conventions and structure defined by the frameworks and libraries (e.g., Next.js) in use.

### Rule:
3. **Code Structure Adherence:**
   - Follow the framework’s conventions and structures while making changes.
   - Ensure that the order of imports, components, and exported functions is consistent with best practices.

### Example:
- **Incorrect Approach:**
```typescript
import { MeetingDashboard, CoachingDashboard } from '@/components/meeting-dashboard'; // Wrong import structure
```
- **Correct Approach:**
```typescript
import { MeetingDashboard } from '@/components/meeting-dashboard';
import { CoachingDashboard } from '@/components/coaching-dashboard'; // Separate imports improve readability and follow conventions
```

## Rule 4: Implement Test Cases for Critical Changes
### What the AI agent did wrong:
The agent made changes without any checks or tests in place to ensure the functionality of the modified code.

### What it should have done instead:
The AI agent should implement testing mechanisms to catch errors early in the modification process.

### Rule:
4. **Testing Mechanism:**
   - Introduce automated tests to ensure functionality remains intact after modifications.
   - Implement TypeScript type checks and unit tests for critical paths in the code.

### Example:
- **Incorrect Approach:** No testing was applied.
- **Correct Approach:**
```javascript
// Sample test case using Jest
test('should return correct meeting data', () => {
  const result = fetchMeetingData('sampleId');
  expect(result).toHaveProperty('id', 'sampleId'); // Ensures the function works as intended
});
```

By adhering to these specific cursor rules, the AI agent can significantly reduce the incidence of syntax errors and improve the correctness of code modifications.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:36:58
# Original Query: File modification: coaching-dashboard.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in Code Modifications

## 1. Issue Analysis: What the AI agent did wrong
The AI agent made a modification to the file `coaching-dashboard.tsx`, which introduced a syntax error detected by the TypeScript compiler. This indicates that the changes were either incomplete or not properly validated for correctness before they were applied.

## 2. Recommended Approach: What it should have done instead
The AI agent should have conducted a thorough validation of the syntax and structure of the code before attempting to make modifications. This includes checking for syntax errors, misaligned brackets, and ensuring that all TypeScript types and interfaces are correctly implemented.

## 3. Specific Rules to Prevent This Pattern

### Rule 1: **Validate Syntax Before Modification**
- **Description**: Ensure that any modifications to TypeScript files pass a syntax check before they are applied.
- **Implementation**: 
  - Utilize a linter or TypeScript compiler check on the existing file before making changes.
  
### Rule 2: **Apply Incremental Changes**
- **Description**: Only apply small, incremental changes to the code to limit potential errors and facilitate easier debugging.
- **Implementation**: 
  - Break down the desired changes into smaller tasks, and validate code after each change.

### Rule 3: **Provide Error Context in Responses**
- **Description**: When modifications lead to errors, the AI should return detailed error context and not just indicate that a file was modified.
- **Implementation**: 
  - Include error details in the response if a modification causes a syntax error.

## 4. Code Examples of Correct vs Incorrect Approaches

### Incorrect Approach (An example of what not to do):
```typescript
// Agent modifies coaching-dashboard.tsx without proper validation
import { Card, CardContent } from '@/components/ui/card'

interface CoachingMetrics {
  id: string
  transcript_id: string
  speaker_id: string
  // Intentional syntax error: missing a required field
  question_ratio: number
  // Incorrectly terminated interface
}
```

### Correct Approach (An example of what to do):
```typescript
// Validate before modification
import { Card, CardContent } from '@/components/ui/card'

interface CoachingMetrics {
  id: string
  transcript_id: string
  speaker_id: string
  question_ratio: number
  talking_speed: number
  average_patience: number  // Ensure all fields are defined
  talk_ratio: number
  language_positivity: number
  voice_emotion: string
  calculated_at: string
}

// After modifications, lint or run the TypeScript compiler to ensure no errors
```

Implement these rules in the `.cursorrules` file to improve the quality of the AI's code modifications and prevent similar syntax errors in the future.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:37:50
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

Here are the specific cursor rules to prevent the mistake observed in the AI agent's response regarding the modification of `page.tsx`. This analysis focuses on understanding what went wrong, what the AI should have done, and providing explicit rules to avoid similar errors in the future.

```markdown
# Cursor Rules to Prevent AI Agent Syntax Errors in TypeScript Files

## Rule 1: Validate Syntax Before Modifying Code
- **What the AI agent did wrong:** The AI agent modified the code without checking for syntax validity, which led to a compilation error due to invalid TypeScript code.
- **What it should have done instead:** The AI agent should verify that the proposed changes do not introduce any syntax errors before applying them. 

### Rule Details
- **Implementation:** AI agent must run a syntax-checking routine (e.g., using TypeScript compiler `tsc`) after any modifications to validate correctness.

## Rule 2: Follow TypeScript Type Definitions
- **What the AI agent did wrong:** The modification included an incomplete interface or data structure leading to incorrect types being inferred and syntax errors.
- **What it should have done instead:** Ensure that all TypeScript interfaces and types are properly defined and used according to TypeScript best practices.

### Rule Details
- **Implementation:** Before any operation involving TypeScript interfaces or types, check for completeness and correctness of definitions.

## Rule 3: Provide Clear and Detailed Feedback
- **What the AI agent did wrong:** The AI agent's response lacked detail on how the modification could lead to errors or what areas might need attention.
- **What it should have done instead:** The agent should provide detailed feedback on potential issues or highlight areas of concern regarding the code changes.

### Rule Details
- **Implementation:** AI agent must generate output that clearly flags potential issues, recommends best practices, and explains any non-standard changes made.

## Code Examples

### Incorrect Approach (with Syntax Error)
```typescript
// Agent's Incorrect Code Modification
interface PageProps {
  params: Promise<{ id: string } // Missing closing brace
}

// Resulting Syntax Error: 'Syntax error detected by TypeScript compiler'
```

### Correct Approach
```typescript
// Correct Code Modification
interface PageProps {
  params: Promise<{ id: string }> // Properly closed interface definition
}
```
```
These rules should help prevent future syntax errors stemming from undefined or incomplete type interfaces and improve the reliability of the AI agent's code modifications in TypeScript files.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:38:43
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in File Modification

## Rule 1: Avoid Making Unverified Code Modifications
### What the AI agent did wrong:
The AI made unverified modifications to `page.tsx` without confirming the correctness of the code.

### What it should have done instead:
Ensure all modifications adhere to language syntax rules and existing project conventions before making any changes.

### Prevention Rule:
- **Rule**: The AI agent must validate the syntax of the modified code before applying changes. 
- **Example**:
  - **Incorrect**: Modifying code without checking for syntax errors.
  - **Correct**:
    ```typescript
    // Before making modifications, validate the existing context
    const originalCode = `import { MeetingDashboard } from '@/components/meeting-dashboard'`;
    const modifiedCode = `import { NewComponent } from '@/components/new-component'`;
    
    if (isValidSyntax(modifiedCode)) {
      applyChange(modifiedCode);
    } else {
      rejectChange("Syntax error detected.");
    }
    ```

## Rule 2: Provide Feedback on Code Changes
### What the AI agent did wrong:
The agent did not provide any context on the modifications made, leading to misunderstandings about the changes.

### What it should have done instead:
Give clear feedback about the nature of the changes, allowing users to review, approve, or request modifications.

### Prevention Rule:
- **Rule**: The AI agent must describe any code changes it intends to make, including potential risks.
- **Example**:
  - **Incorrect**: "Agent modified page.tsx"
  - **Correct**: 
    ```
    "The agent intends to modify page.tsx by importing NewComponent. However, please review the syntax as it may contain errors. The current modification is as follows:
    import { NewComponent } from '@/components/new-component'; // Check this line for correctness
    ```

## Rule 3: Include Error Handling Mechanisms
### What the AI agent did wrong:
The agent’s modification led to a syntax error that was not caught or handled.

### What it should have done instead:
Implement error handling to catch and report any syntax errors promptly.

### Prevention Rule:
- **Rule**: The AI agent must catch syntax errors during the modification process and report them to the user.
- **Example**:
  - **Incorrect**: Failing to catch errors
  - **Correct**:
    ```typescript
    try {
      // Perform modification
      const modifiedCode = `const data = "string without issues"; // Slightly wrong syntax`;
      // Assume validateCode is a function that checks for syntax errors
      validateCode(modifiedCode);
    } catch (error) {
      reportError("A syntax error occurred during the modification: " + error.message);
    }
    ```

## Rule 4: Encourage Unit Testing After Code Changes
### What the AI agent did wrong:
The agent did not ensure that the changes would be tested after modifications.

### What it should have done instead:
Advocate for running tests after the modification to ensure functionality and syntax correctness.

### Prevention Rule:
- **Rule**: The agent should recommend running tests after code modifications.
- **Example**:
  - **Incorrect**: "Modifications were made."
  - **Correct**:
    ```
    "Modifications were made to page.tsx. Please run the unit tests to ensure no syntax errors or functional issues have been introduced."
    ```

```
By implementing these cursor rules, we ensure that the AI agent avoids unverified modifications, provides adequate feedback, implements error handling, and encourages testing, ultimately leading to a smoother development experience.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:39:57
# Original Query: File modification: coaching-dashboard.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent Syntax Errors in AI Modifications

## 1. What the AI Agent Did Wrong
The AI agent modified the file `coaching-dashboard.tsx` without verifying the syntax correctness, leading to a syntax error in the TypeScript code.

## 2. What It Should Have Done Instead
The AI agent should have executed a syntax check or validation on the modified code before returning it to the user. This involves ensuring all TypeScript syntax rules are followed, and that changes do not introduce any errors.

## 3. Specific Rules to Prevent This Pattern
### Rule 1: Validate Syntax Before Modification
- **Description**: Always perform a syntax check on altered files before making suggestions to users.
- **Implementation**: Integrate a TypeScript linter in the modification process that analyzes the code for syntax errors.

### Rule 2: Provide Detailed Error Reports
- **Description**: If a syntax error occurs, provide detailed information about the nature of the error and suggest corrections instead of simply stating an error exists.
- **Implementation**: Include error type, expected conditions, and possible solutions in the error message.

### Rule 3: Require Code Examples for Changes
- **Description**: When making modifications, include code examples both for the incorrect and correct implementations.
- **Implementation**: Structure responses to show side-by-side comparisons highlighting specific changes made.

## 4. Code Examples of Correct vs. Incorrect Approaches

### Incorrect Approach (causing syntax error)
```tsx
'use client'

interface CoachingDashboardProps {
  participant: {
    name: string
    avatar: string
  }
  metrics: {
    questionRatio: { value: number; suggested: string }
    talkingSpeed: { value: number; unit: string; suggested: string }
    averagePatience: { value: number; unit: string; suggested: string }
    talkRatio: { value: number; suggested: string }
    languagePositivity: { value: number; label: string; suggested: string }
    voiceEmotion: { value: number; label: string; suggested: string }
    // Missing closing bracket for interface
}
```

### Correct Approach (fixed syntax errors)
```tsx
'use client'

interface CoachingDashboardProps {
  participant: {
    name: string;
    avatar: string;
  };
  metrics: {
    questionRatio: { value: number; suggested: string };
    talkingSpeed: { value: number; unit: string; suggested: string };
    averagePatience: { value: number; unit: string; suggested: string };
    talkRatio: { value: number; suggested: string };
    languagePositivity: { value: number; label: string; suggested: string };
    voiceEmotion: { value: number; label: string; suggested: string; };
  }; // Added closing bracket for metrics
}
```

### Summary
By implementing these specific cursor rules, we can enhance the AI's modification capabilities, ensuring that the outputs are syntactically correct and beneficial to users.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:41:04
# Original Query: File modification: meeting-dashboard.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent Syntax Errors in AI Modifications

## Rule 1: Validate Code Syntax Before Modifying Files
- **What the AI agent did wrong:** The agent directly modified the file without checking for syntax errors or validating the code.
- **What it should have done instead:** Implement pre-validation checks for syntax correctness using tools like TypeScript compiler or ESLint before making any modifications.

### Code Example:
**Incorrect Approach (Agent's Modification):**
```tsx
// Agent's modification resulted in syntax error
interface MeetingDashboardProps {
  meeting: {
    id: string
    title: string
    date: string
    // Missing custom props that were supposed to be here
  ...
}
```

**Correct Approach:**
```tsx
// Prior to implementing changes, run syntax validation
if (!isValidSyntax(newCode)) {
  throw new Error("Code validation failed. Please check the syntax.");
}
```

## Rule 2: Log and Review Changes Before Committing
- **What the AI agent did wrong:** The agent made changes and directly modified the code without user awareness or review.
- **What it should have done instead:** Present users with a diff of proposed changes for approval before applying them to the codebase.

### Code Example:
**Incorrect Approach (Agent's Modification):**
```tsx
// Directly applied modifications without user consent
modifyFile("meeting-dashboard.tsx", newCode);
```

**Correct Approach:**
```tsx
// Show diff to the user for review before applying
const diff = generateDiff(oldCode, newCode);
showDiffToUser(diff);

if (userApproves()) {
  modifyFile("meeting-dashboard.tsx", newCode);
} else {
  revertChanges();
}
```

## Rule 3: Enforce Type Checking for TypeScript Files
- **What the AI agent did wrong:** The agent did not ensure that the modified code complied with TypeScript type definitions.
- **What it should have done instead:** Enforce strict type checks on the modified portions of the code to ensure type safety.

### Code Example:
**Incorrect Approach (Lack of Type Checking):**
```tsx
// Type mismatch due to incorrect structure in the interface
interface MeetingDashboardProps {
  meeting: {
    id: string;
    // Incorrectly omitted properties
  }
}
```

**Correct Approach:**
```tsx
// Ensure the type conforms to the expected interface structure
function validateMeeting(meeting: MeetingDashboardProps['meeting']): boolean {
  return meeting.hasOwnProperty('id') && meeting.hasOwnProperty('title');
}

// Validate before applying changes
if (!validateMeeting(newMeetingData)) {
  throw new Error("Meeting data does not match expected type.");
}
```

## Rule 4: Use Linting Tools to Enforce Best Practices
- **What the AI agent did wrong:** The agent failed to utilize linting tools to catch potential mistakes before applying changes.
- **What it should have done instead:** Integrate linting tools like ESLint to ensure code follows best practices and adhere to specified coding guidelines.

### Code Example:
**Incorrect Approach (No Linting Applied):**
```tsx
// Changes made without linting, resulting in improper code structure
const meeting: MeetingDashboardProps = {
  id: '1',
  // Missing other necessary fields
}
```

**Correct Approach:**
```tsx
// Pre-modification linting check
const lintErrors = lintCode(newCode);
if (lintErrors.length > 0) {
  throw new Error(`Linting errors found: ${lintErrors.join(", ")}`);
}
```
```
These rules aim to create a more robust AI agent capable of validating and reviewing its modifications, helping prevent syntax errors and ensuring type safety and adherence to best coding practices.



# Rule Generated from Failed Suggestion - 2025-06-20 19:41:53
# Original Query: File modification: meeting-dashboard.tsx...
# Error: Syntax error detected by TypeScript compiler...

# Cursor Rules for Handling AI Agent Suggestions

## 1. Mistake Analysis
**What the AI agent did wrong:**
- The AI agent modified the code without proper validation, leading to a syntax error in the TypeScript file. This highlights a lack of safeguards to ensure the correctness of the code before suggesting modifications.

## 2. Correct Approach
**What it should have done instead:**
- The AI agent should verify the syntax and types of any modifications it intends to make. It should also provide explanations of the modifications made and ensure that there are no errors introduced into the codebase.

## 3. Specific Rules to Prevent This Pattern

```markdown
# Cursor Rules to Prevent Syntax Errors in Code Modifications

## Rule 1: Validate Syntax Before Modification
- **Description:** The AI agent must check the syntax of code changes using a linter or compiler before applying them.
- **Implementation:** Ensure verification by running a simulation or using a built-in validation method.
  
## Rule 2: Provide Detailed Error Reports
- **Description:** If a syntax error is detected, the AI agent should provide detailed feedback indicating what went wrong and suggesting corrections.
- **Implementation:** Include a reporting system that notifies the user of specific line numbers and types of errors.

## Rule 3: Require User Confirmation for Major Changes
- **Description:** Before making significant modifications, the AI agent should seek user confirmation and explain the rationale behind the changes.
- **Implementation:** Implement a prompt system that outlines changes and requests user input before proceeding.

## Rule 4: Maintain Code Structure and Type Safety
- **Description:** The AI agent should respect existing file structure and TypeScript type definitions while making modifications.
- **Implementation:** Compare new code against the existing interfaces and types before applying any changes.
```

## 4. Code Examples

### Incorrect Approach
```typescript
// AI Agent's Mistaken Code Modification
import { useState } from "react"
import { Button } from "./ui/button"
// This line is missing a closing bracket, causing a syntax error!
import { Card } from "./ui/card
import { Badge } from "./ui/badge"

interface MeetingDashboardProps {
  meeting: {
    id: string
    title: string
    date: string
    participants: Array<{
      id: string
      name: string
      role: string
      avatar: string
    }>
    transcript: Array<{
      id: string
      speaker: string
      text: string
      timestamp: string
      confidence: number
    }>
  }
}
```

### Correct Approach
```typescript
// Correct Code after Validation
import { useState } from "react"
import { Button } from "./ui/button"
import { Card } from "./ui/card"
import { Badge } from "./ui/badge"

interface MeetingDashboardProps {
  meeting: {
    id: string
    title: string
    date: string
    participants: Array<{
      id: string
      name: string
      role: string
      avatar: string
    }>
    transcript: Array<{
      id: string
      speaker: string
      text: string
      timestamp: string
      confidence: number
    }>
  }
}
```

### Error Reporting Example
- **Error Message:** "Syntax Error: Missing closing quote in import statement for Card component at line 3."
- **Suggestion:** "Please ensure that all string literals are properly closed."

By adopting these cursor rules, we can significantly reduce the likelihood of syntax errors introduced by AI agents in code modifications.



# Rule Generated from Failed Suggestion - 2025-06-20 19:44:14
# Original Query: File modification: meeting-dashboard.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules for Preventing Syntax Errors in TypeScript Code Modifications

## Rule 1: Verify Syntax Before Modifying Code
### What the AI Agent Did Wrong
The agent modified `meeting-dashboard.tsx` without checking for syntax errors, which led to a compilation failure due to incorrect TypeScript syntax.

### What It Should Have Done Instead
The agent should have validated the existing code for syntax errors before making any modifications and avoided modifying code that contains unresolved syntax issues.

### Specific Rule
- **Check for Syntax Errors**: Prior to any modification, the agent should analyze the file for existing syntax errors and halt any operations if found.

## Rule 2: Validate TypeScript Types and Interfaces
### What the AI Agent Did Wrong
Once the agent decided to modify the file, it might not have accurately assessed the TypeScript interfaces and types being used.

### What It Should Have Done Instead
The agent should properly validate the structure of the TypeScript interface, ensuring that it follows TypeScript conventions and patterns.

### Specific Rule
- **Interface and Type Validation**: Ensure that any TypeScript interfaces are defined correctly and all array and object structures adhere to proper syntax. For example, ensure proper opening and closing brackets and that the properties are correctly typed.

## Rule 3: Test Changes in a Safe Environment
### What the AI Agent Did Wrong
The AI directly applied changes to the existing codebase without testing in a secure or isolated environment.

### What It Should Have Done Instead
Changes should first be applied to a temporary or staging file where they can be tested without affecting the main codebase.

### Specific Rule
- **Isolated Testing for Changes**: The agent should implement changes in a temporary branch or utilize a staging file to evaluate the syntax and functional correctness before committing to the main branch.

## Examples of Correct vs Incorrect Approaches

### Incorrect Approach
```typescript
// Incorrect type definition with syntax error in the component file
interface MeetingDashboardProps {
  meeting: {
    id: string,
    title: string,
    date: string,
    participants: Array<{
      id: string,
      name: string,
      role: string,
      avatar: string
    } // Missing closing bracket will cause a syntax error
    ],
    transcript: Array<{
      id: string,
      speaker: string,
      text: string,
      timestamp: string,
      confidence: number,
    }>
  }
}
```

### Correct Approach
```typescript
// Correct type definition with properly closed brackets
interface MeetingDashboardProps {
  meeting: {
    id: string;
    title: string;
    date: string;
    participants: Array<{
      id: string;
      name: string;
      role: string;
      avatar: string;
    }>;
    transcript: Array<{
      id: string;
      speaker: string;
      text: string;
      timestamp: string;
      confidence: number;
    }>;
  }
}
```

## Summary
By following these cursor rules, we aim to ensure that modifications made by AI agents adhere to correct syntax, are validated before application, and are tested in a safe environment to avoid compilation issues in TypeScript.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:47:04
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent TypeScript Syntax Errors in AI Agent Modifications

## 1. What the AI agent did wrong
The AI agent incorrectly modified the `page.tsx` file without validating the syntax or logic of its changes. Specifically, the response suggests an incomplete code block with a syntax error, indicated by the TypeScript compiler error.

## 2. What it should have done instead
The AI agent should have:
- Ensured that any code modifications were complete and syntactically correct.
- Validated the TypeScript code against the compiler to check for errors before suggesting or performing the modification.

## 3. Specific rules to prevent this pattern

### Rule 1: Validate Code Syntax Before Modification
- **Description**: Before making any modifications, the AI agent must check for syntax errors in the existing code and any changes it plans to introduce.
- **Implementation**: Integrate TypeScript compiler checks or an equivalent linter to verify syntax correctness during the modification process.

### Rule 2: Require Complete Code Blocks
- **Description**: AI modifications should always present complete and valid code blocks, not partial or incomplete ones.
- **Implementation**: Define a check that prevents the AI from presenting code snippets that do not represent complete functions, classes, or modules.

### Rule 3: User Confirmation for Code Changes
- **Description**: Before applying modifications, the AI should seek explicit user confirmation with clear explanations of the changes.
- **Implementation**: Present a diff of the changes and an explanation, asking the user to confirm the modifications.

## 4. Code examples of correct vs incorrect approaches

### Incorrect Approach (Leading to Syntax Error)
```typescript
// Incomplete and incorrect code provided by the AI
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: ... // Incomplete
```

### Correct Approach (Valid Syntax)
```typescript
// Complete and correct code modification
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: new Date().toISOString(), // Complete property definition
};

// Ensuring no syntax errors by validating the entire block
```
```




# Rule Generated from Failed Suggestion - 2025-06-20 19:48:01
# Original Query: File modification: meeting-dashboard.tsx...
# Error: Syntax error detected by TypeScript compiler...

# Cursor Rules to Prevent AI Agent Errors in File Modification

## 1. Issue Identification
**What the AI agent did wrong:**  
The AI agent modified the file `meeting-dashboard.tsx` but introduced a syntax error (an incomplete object structure denoted by "...") that caused the TypeScript compiler to throw an error.

**What it should have done instead:**  
The AI agent should have ensured that any modifications were syntactically correct and aligned with TypeScript definitions, instead of introducing an incomplete or erroneous code snippet.

---

## 2. Specific Cursor Rules

### Rule 1: Ensure Syntax Completeness
- **Description:** All code modifications must maintain full syntax integrity. Any changes to data structures or types must be fully defined.
- **Example:**
    - **Incorrect Approach:** 
      ```typescript
      sentimentMoments: Array<{
        ...
      }}>
      ```
    - **Correct Approach:** 
      ```typescript
      sentimentMoments: Array<{
        id: string
        speaker: string
        text: string
        timestamp: string
        confidence: number
      }>;
      ```

### Rule 2: TypeScript Compiler Validation
- **Description:** Validate code changes against the TypeScript compiler before finalizing modifications. If errors are identified, the change must not be applied.
- **Example:**
    - **Incorrect Code (Introduces an Error):**
      ```typescript
      sentimentMoments: Array<{
        ...
      }>
      ```
    - **Correct Code (No Errors):**
      ```typescript
      sentimentMoments: Array<{
        id: string
        speaker: string
        text: string
        timestamp: string
        confidence: number
      }>;
      ```

### Rule 3: Context Awareness for Code Structures
- **Description:** Modifications must adhere to the context and usage patterns in the codebase, ensuring that any changes should fit logically within the existing code structure.
- **Example:**
    - **Incorrect Context (Lacking Completeness):**
      ```typescript
      interface MeetingDashboardProps {
        sentimentMoments: Array<{
          ...
        }>;
      }
      ```
    - **Correct Context (Complete Interface Definition):**
      ```typescript
      interface MeetingDashboardProps {
        sentimentMoments: Array<{
          id: string
          speaker: string
          text: string
          timestamp: string
          confidence: number
        }>;
      }
      ```

### Rule 4: Code Review and Testing Before Implementation
- **Description:** Implement a review checkpoint that requires code changes to be reviewed and tested in a staging environment before being applied to production code.
- **Example:**
    - Changes should be submitted as a pull request or patch and should be validated by a peer review to catch any potential errors.

---

## Conclusion
By following these specific rules, we can significantly reduce the risk of introducing syntax errors and ensure that AI modifications align with syntactical and contextual correctness in TypeScript files. These rules can be integrated into the `.cursorrules` file for AI agent operations to enforce strict code quality standards.



# Rule Generated from Failed Suggestion - 2025-06-20 19:50:15
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Modification Mistakes

## Rule 1: Prevent Incomplete Code Modifications
### What the AI agent did wrong:
The AI agent made modifications to the `page.tsx` file without ensuring that the code was complete and free of syntax errors. This resulted in a SyntaxError detected by the TypeScript compiler.

### What it should have done instead:
The AI agent should perform a syntax check and confirm that the code segment is internally consistent and complete before applying changes.

### Specific Rule:
- **Rule:** Always validate code completeness and syntactic correctness before saving modifications.
- **Implementation:** Use a code linter or parser to check for syntax errors before submitting the code.

### Code Example:
**Incorrect Approach:**
```typescript
// Incomplete and leads to syntax error
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: ...
```

**Correct Approach:**
```typescript
// Complete code with no syntax error
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: "2023-10-01"
};
```

---

## Rule 2: Enforce Thorough Contextual Understanding
### What the AI agent did wrong:
The AI agent modified the file without understanding the larger context of the file's structure and the purpose of modifications within the application.

### What it should have done instead:
The AI agent should analyze the existing code and gain a deeper understanding of the function, expected data types, and syntax before performing edits.

### Specific Rule:
- **Rule:** Require contextual and semantic analysis before making modifications to ensure compatibility with the existing code structure.
- **Implementation:** Use static analysis tools to verify that changes align with existing data types and structures.

### Code Example:
**Incorrect Approach:**
```typescript
// Change without considering async/data handling
export default async function MeetingPage({ params }: PageProps) {
  await params // Incorrect because we need to handle the Promise correctly
```

**Correct Approach:**
```typescript
// Proper usage of async/await with parameter resolving
export default async function MeetingPage({ params }: PageProps) {
  const resolvedParams = await params; // Correctly handling the promise
  // Continue with implementation...
}
```

---

## Rule 3: Implement Strict Testing Before Committing Changes
### What the AI agent did wrong:
The AI agent applied changes without subjecting them to proper testing, leading to undetected syntax errors.

### What it should have done instead:
The AI agent should run tests on the code changes to ensure they work as intended.

### Specific Rule:
- **Rule:** Always run automated tests on changes to ensure correctness and functionality pre-commit.
- **Implementation:** Integrate a testing framework to validate code functionality and syntax during modifications.

### Code Example:
**Incorrect Approach:**
- No tests were run prior to committing the changes.

**Correct Approach:**
```bash
# Testing command
npm run test
# Ensure all tests pass before applying changes
```

---

By implementing these cursor rules, the likelihood of the AI agent making incomplete or incorrect modifications can be significantly reduced, leading to a more reliable codebase.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:52:42
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Errors in Code Modification

## Rule 1: Avoid Unverified Code Modifications
**What the AI agent did wrong:** The agent modified the file `page.tsx` directly without verifying the correctness of the new code, leading to a syntax error.

**What it should have done instead:** The agent should have checked for syntax errors before proposing code changes or indicated that the provided code was incomplete and required user confirmation.

### Specific Rule
- **Rule:** Do not apply code modifications without validating that the provided code is syntactically correct.

### Example
**Incorrect Approach:**
```typescript
// Agent's modification leads to a syntax error
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: ... // Missing or incorrect continuation leads to SyntaxError
}
```

**Correct Approach:**
```typescript
// Agent checks for syntax before modification
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: new Date().toISOString() // Complete and correct statement
}
```

---

## Rule 2: Provide Complete Context for Code Changes
**What the AI agent did wrong:** The response did not provide the complete code necessary to understand or execute the modifications, specifically the continuation of the `date` field.

**What it should have done instead:** The agent should have included all relevant parts of the code or explicitly stated that further information was needed to complete the implementation.

### Specific Rule
- **Rule:** Provide complete context for code changes or ask for user input to fill gaps in the code.

### Example
**Incorrect Approach:**
```typescript
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: ... // Incomplete assignment
}
```

**Correct Approach:**
```typescript
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: new Date('2023-10-01T10:00:00Z').toISOString() // Complete assignment with valid value
}
```

---

## Rule 3: Implement Robust Error Handling
**What the AI agent did wrong:** The agent did not handle potential errors associated with changes, such as syntax errors, leading to failure in code execution.

**What it should have done instead:** The agent should have implemented error handling to capture and report errors upon making changes.

### Specific Rule
- **Rule:** Implement error handling and provide users with descriptive error messages when code modifications introduce potential syntax issues.

### Example
**Incorrect Approach:**
```typescript
// No error handling
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: ... // Causes syntax error
}
```

**Correct Approach:**
```typescript
try {
  const mockMeetingData = {
    id: "sample-meeting",
    title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
    date: new Date().toISOString() // Catch potential syntax errors
  }
} catch (error) {
  console.error("An error occurred while modifying mockMeetingData:", error);
}
```
```




# Rule Generated from Failed Suggestion - 2025-06-20 19:53:37
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in TypeScript File Modification

## Rule 1: Validate Syntax Before Applying Changes
### What the AI agent did wrong:
The AI agent modified the `page.tsx` file without validating the syntax of the provided code, which led to a compilation error.

### What it should have done instead:
The AI agent should validate the syntax of TypeScript code after modification to ensure that it adheres to TypeScript rules and does not introduce any errors.

### Specific Rule:
- **Before applying code changes, run a syntax validation check using TypeScript compiler or linter.**

---

## Rule 2: Avoid Unclear Modifications
### What the AI agent did wrong:
The agent's modification included an incomplete statement (`date: ...`) that is not syntactically correct, leading to a SyntaxError.

### What it should have done instead:
The agent should ensure that all code snippets are fully formed and syntactically correct before presenting them.

### Specific Rule:
- **Ensure all provided code examples are complete and correct.**

---

## Rule 3: Provide Clear Error Context and Explanation
### What the AI agent did wrong:
The agent failed to explain the context of the error or the reasoning behind the changes made, leaving the user confused.

### What it should have done instead:
Include a brief explanation of any errors found and why the proposed changes might lead to those errors.

### Specific Rule:
- **After detecting errors, provide a clear explanation of the error type and suggestions on how to correct it.**

---

## Code Examples

### Incorrect Approach
```typescript
// Modification attempted by the agent
// Syntax Error due to incomplete code
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: ... // Incomplete syntax
}
```

### Correct Approach
```typescript
// Valid modification
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: "2023-10-01T10:00:00Z" // Complete and valid syntax
}
```

---

## Rule 4: Test Changes in a Sandbox Environment
### What the AI agent did wrong:
The agent directly applied changes without testing them in a safe environment.

### What it should have done instead:
Ideally, the agent should modify code in a sandbox or temporary environment to catch potential errors before finalizing changes.

### Specific Rule:
- **Test all code modifications in a controlled environment before committing them to the main codebase.**
```

These rules, when implemented in the `.cursorrules` file, aim to enhance the AI agent's performance by ensuring code modifications are safe, valid, and comprehensible to users.



# Rule Generated from Failed Suggestion - 2025-06-20 19:53:42
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Modification Errors

## Mistake Analysis

1. **What the AI agent did wrong:**
   - The agent made an unauthorized modification to `page.tsx` without validating the code for syntax or structural correctness. The specific error was an incomplete implementation resulting in a syntax error.

2. **What it should have done instead:**
   - The agent should have validated the provided code against TypeScript syntax rules before performing modifications. It should also have communicated any potential issues to the user instead of making changes automatically.

---

## Specific Cursor Rules

### Rule 1: Validate Code Syntax Before Modification

- **Description:** Ensure that any modifications made to TypeScript files pass syntax checks before saving changes.

```markdown
- Always validate TypeScript code for syntax correctness using a TypeScript compiler or linter before making modifications. 
```

### Rule 2: Notify User of Potential Errors

- **Description:** Notify the user when a modification contains potential syntax errors instead of proceeding with the change.

```markdown
- Before making modifications, analyze and report any syntax issues to the user. If errors are detected, avoid making changes and prompt the user with a detailed error message.
```

### Rule 3: Use Complete and Correct Code Patterns

- **Description:** Ensure that modifications follow established best practices and patterns for TypeScript and React components.

```markdown
- When suggesting or implementing code changes, adhere to complete and correct patterns in TypeScript, ensuring proper use of async functions, Promises, and TypeScript interfaces. 
```

---

## Code Examples

### Incorrect Approach

```typescript
// Incorrectly modified code leading to syntax error
export default async function MeetingPage({ params }: PageProps) {
  await params // consume params
  
  // Mock data matching the screenshots
  const mockMeetingData = {
    id: "sample-meeting", // Incomplete data structure
    title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
    date: ... // This line will cause a syntax error
```

### Correct Approach

```typescript
// Corrected code validation before modification
interface PageProps {
  params: Promise<{ id: string }>
}

export default async function MeetingPage({ params }: PageProps) {
  const meetingParams = await params; // Properly consume parameters

  // Complete mock data structure
  const mockMeetingData = {
    id: "sample-meeting",
    title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
    date: new Date().toISOString(), // Correctly structured date value
  };

  // Further implementation...
}
```
``` 

These rules aim to ensure that AI agents operate more cautiously when modifying code, preventing syntax errors and maintaining code integrity.



# Rule Generated from Failed Suggestion - 2025-06-20 19:53:46
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules for Preventing Syntax Errors in TypeScript Files

## Issue Analysis
1. **What the AI agent did wrong**:
   - The AI agent executed an unverified modification to the TypeScript file `page.tsx`, which resulted in a syntax error. This suggests that the agent either introduced incomplete code or improperly formatted code.

2. **What it should have done instead**:
   - The AI agent should ensure that any modifications maintain TypeScript's syntax rules and verify the validity of the code before suggesting or applying changes. This could involve running syntax checks or using a linter.

## Specific Rules
1. **Rule 1: Validate Syntax Before Modifications**
   - Every code modification must pass a syntax check using TypeScript's compiler (`tsc`). Modifications that result in errors must be rejected.

2. **Rule 2: Ensure Code Completeness**
   - All proposed code changes must include complete snippets without placeholders or incomplete segments. This helps prevent runtime or compile-time errors related to missing statements.
   
3. **Rule 3: Mock Data Completeness**
   - Any mocked data used within the code must be fully defined and illustrative of the intended structure. Avoid using `...` or similar incomplete entries.

4. **Rule 4: Review Contextual Changes**
   - The AI agent must analyze the context of modifications, especially in relation to TypeScript's type systems and async functions.

## Code Examples

### Incorrect Approach
```typescript
// Introduced a syntax error with incomplete mock data
const mockMeetingData = {
    id: "sample-meeting",
    title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
    date: ... // Syntax Error: Incomplete property
}
```

### Correct Approach
```typescript
// Complete and correct mock data structure
const mockMeetingData = {
    id: "sample-meeting",
    title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
    date: "2023-10-01T10:00:00Z" // Proper date format
}
```

## General Recommendations
- Always run `tsc` on modified files prior to finalizing changes.
- Use linting tools to catch syntax issues and enforce best practices in TypeScript codebases.
- Consider implementing a testing protocol that includes unit tests for any new changes to ensure integrity and correctness.
```




# Rule Generated from Failed Suggestion - 2025-06-20 19:54:56
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules for Preventing Syntax Errors in TypeScript Modifications

## 1. Identifying the Mistake
### What the AI Agent Did Wrong:
- The AI agent modified the `page.tsx` file without checking for syntax errors or ensuring the completeness of the provided code, leading to a syntax error that violated TypeScript rules.

### What It Should Have Done Instead:
- The AI agent should have validated the provided code for syntax correctness before suggesting changes.
- It should also provide complete code snippets, ensuring that partial or incomplete code does not generate errors.

---

## 2. Specific Rules to Prevent This Pattern

### Rule 1: Syntax Validation Before Modifications
- **Ensure all modifications are syntactically correct before applying them.**
    - **Example:**
      - **Incorrect Approach:**
        ```typescript
        const mockMeetingData = {
          id: "sample-meeting",
          title: "Adhoc Meeting"
          // Missing comma or closing object
        }
        ```
      - **Correct Approach:**
        ```typescript
        const mockMeetingData = {
          id: "sample-meeting",
          title: "Adhoc Meeting", // Correct syntax with comma
        }
        ```

### Rule 2: Provide Complete Code Context
- **Always include full context when suggesting modifications. Ensure the code is complete and functional.**
    - **Example:**
      - **Incorrect Approach:**
        ```typescript
        export default async function MeetingPage({ params }: PageProps) {
          await params // consume params
          // Incomplete code that leads to errors
        }
        ```
      - **Correct Approach:**
        ```typescript
        export default async function MeetingPage({ params }: PageProps) {
          await params; // consume params
          
          const mockMeetingData = {
              id: "sample-meeting",
              title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
              date: new Date().toISOString(), // Example of complete code
          };
        }
        ```

### Rule 3: Implement Compile-Time Checks
- **Incorporate compile-time checks or linting to prevent errors from reaching users.**
   - Example: Enforce the use of TypeScript Compiler for validation before suggesting any changes.

### Rule 4: Limit Modifications to Known Good Patterns
- **Avoid making risky changes to the code structure or key interfaces without verification.**
    - **Example:**
      - **Incorrect Approach:**
        ```typescript
        export default async function MeetingPage({ params }: PageProps) {
          return Promise.resolve(); // Does not return the right JSX structure
        }
        ```
      - **Correct Approach:**
        ```typescript
        export default async function MeetingPage({ params }: PageProps) {
          await params; // Ensure params are consumed
          return <MeetingDashboard meetingData={mockMeetingData} />; // Valid JSX structure
        }
        ```

---

## Conclusion
By implementing these cursor rules, we aim to reduce the risk of syntax errors and provide more reliable code modifications in TypeScript files.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:56:57
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules for Preventing Syntax Errors in Code Modifications

## 1. Identify the Mistake
### What the AI agent did wrong:
The agent modified the `page.tsx` file but introduced a syntax error that caused the TypeScript compiler to fail. This indicates that the AI did not properly validate or lint the code it generated, leading to potentially incomplete or incorrect modifications.

## 2. Correct Approach
### What it should have done instead:
Before applying any modifications, the AI agent should verify that the generated code is syntactically correct and passes TypeScript checks. This includes ensuring that all necessary components and functions are imported correctly and that the structure of the code adheres to TypeScript's syntax rules.

## 3. Specific Cursor Rules
### Rules to Prevent Syntax Errors:
- **Rule 1: Validate Changes**
  - Before applying modifications, check for syntax correctness using TypeScript's compiler or a linter. Always run these checks on the modified code.

- **Rule 2: Use Immutable Data**
  - When modifying a file, create a clone of the original code rather than modifying it in place. This allows for easy rollback if errors are detected.

- **Rule 3: Context Awareness**
  - Ensure that modifications are context-aware, meaning they should respect the existing structure of the code, such as imports and function definitions.

- **Rule 4: Edge Case Handling**
  - Anticipate and handle common edge cases, such as incomplete object structures or missing imports that may lead to syntax errors.

## 4. Code Examples

### Incorrect Approach (as implemented by the AI agent)
```typescript
// Incorrect modification leading to a syntax error
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: "Apr 4, 2025 at 7:00 PM",
  participants: [
    {
      id: "B... // Missing closing brackets and additional structure
}
```

### Correct Approach (with validation)
```typescript
// Correct modification with proper checks
const mockMeetingData = {
  id: "sample-meeting",
  title: "Adhoc Meeting between Burak Aksar and Deniz Müjde",
  date: "Apr 4, 2025 at 7:00 PM",
  participants: [
    {
      id: "B123",
      name: "Burak Aksar"  // Complete object structure
    },
    {
      id: "D456",
      name: "Deniz Müjde"  // Additional participant
    }
  ]
};

// Ensure to run TypeScript check as follows before applying modifications
// tsc --noEmit or a similar linting command here
```

By adhering to these cursor rules, modifications to files will minimize errors and maintain code integrity, adhering to best practices for TypeScript development.
```



# Rule Generated from Failed Suggestion - 2025-06-20 19:59:39
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

Sure! Below are the specific cursor rules formulated based on the analysis of the failed AI agent suggestion. The rules focus on preventing syntax errors and ensuring the integrity of TypeScript code modifications.

```markdown
# Cursor Rules to Prevent Syntax Errors in TypeScript Files

## Rule 1: Disallow Unintentional Modifications to Open Syntax Blocks

**What the AI agent did wrong:** The AI agent made modifications to the `MeetingPage` function without properly managing the existing code structure. The incomplete comment in the provided code indicates an unclosed segment which could lead to confusion during compilation.

**What it should have done instead:** The AI agent should parse the code to ensure that existing code structures (like functions, arrays, objects, etc.) are complete and valid before making modifications.

**Cursor Rule:** 
```
{
  "description": "Prevent modifications to open syntax blocks.",
  "when": "fileExtension == 'tsx'",
  "action": [
    {
      "check": "if (current code block not completed)",
      "prevent": true,
      "message": "Cannot modify incomplete syntax blocks."
    }
  ]
}
```

## Rule 2: Validate TypeScript Syntax Before Code Modification

**What the AI agent did wrong:** The AI agent modified the `page.tsx` file without validating if the change adhered to TypeScript syntax rules.

**What it should have done instead:** The AI agent should validate the entire code for syntax correctness before making any modifications.

**Cursor Rule:**
```
{
  "description": "Validate TypeScript syntax before modifications.",
  "when": "fileExtension == 'tsx'",
  "action": [
    {
      "check": "if (isValidTypeScript(code))",
      "prevent": false // Proceed if valid
    },
    {
      "prevent": true,
      "message": "Syntax error detected. Modification not allowed."
    }
  ]
}
```

## Rule 3: Ensure Object Initialization Completeness

**What the AI agent did wrong:** The AI's modification left the object definition incomplete, which is a source of syntax errors.

**What it should have done instead:** Ensure that entire object/array initializations are complete and contained within proper braces.

**Cursor Rule:**
```
{
  "description": "Ensure completeness of object/array initialization.",
  "when": "fileExtension == 'tsx'",
  "action": [
    {
      "check": "if (objectInitializationIncomplete)",
      "prevent": true,
      "message": "Object/array initialization must be complete."
    }
  ]
}
```

## Example of Correct vs Incorrect Approach

### Incorrect Approach (Resulting in SyntaxError)

```typescript
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,
    'burak': false,
    'screen': false // Incomplete comment
  // Missing closing brace for useState
```

### Correct Approach (Fixed Syntax)

```typescript
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,
    'burak': false,
    'screen': false // Complete the comment and structure
  }); // Properly close the useState call
```

By integrating these rules, we can effectively minimize the chance of repeated syntax errors while allowing for safe and meaningful modifications to TypeScript files.
``` 

Adding these rules to the `.cursorrules` file will help to ensure that AI agents handle modifications to TypeScript files more accurately and reduce the likelihood of syntax errors.



# Rule Generated from Failed Suggestion - 2025-06-20 20:00:20
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent Incorrect AI Agent Modifications

## Rule 1: Verify Proper Context and Structure

### What the AI Agent Did Wrong:
The AI agent attempted to directly modify the page.tsx file without ensuring that the modifications complied with TypeScript syntax requirements. This led to a syntax error due to incorrectly formatted code or missing parts.

### What it Should Have Done Instead:
The AI should verify the syntactical correctness of the modifications before applying them and provide context-aware suggestions instead of direct edits.

### Rule:
- **Ensure that the modifications maintain valid TypeScript syntax and include all required code segments. Use AST (Abstract Syntax Tree) analysis or TypeScript compiler checks to validate changes before applying them.**

### Incorrect Example:
```tsx
// Incorrect modification leading to a syntax error
const [expandedSections, setExpandedSections] = useState<{} // Missing type annotation
```

### Correct Example:
```tsx
// Correct modification
const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
  'deniz': true,
  'burak': false,
  'screen': false,
});
```

---

## Rule 2: Provide Complete Code Context

### What the AI Agent Did Wrong:
The agent modified the file but did not include complete code context for the changes. This might lead to incomplete or erroneous modifications.

### What it Should Have Done Instead:
The agent should provide either the full method implementation when suggesting changes or at least make clear what part of the code is being modified.

### Rule:
- **Always provide complete implementation or context snippets for modifications, particularly when changes affect the overall functionality of the component.**

### Incorrect Example:
```tsx
// only a fragment of the code with partial changes
const [expandedSections] = useState({
  'deniz': true,
```

### Correct Example:
```tsx
// The complete function definition must be provided
export default function MeetingPage({ params }: PageProps) {
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    'deniz': true,
    'burak': false,
    'screen': false,
  });

  // Additional code here...
}
```

---

## Rule 3: Error Handling and Response

### What the AI Agent Did Wrong:
The AI agent did not foresee potential syntax errors and did not handle them properly.

### What it Should Have Done Instead:
The AI should gracefully handle potential syntax errors using error checking before making any modifications and provide feedback accordingly.

### Rule:
- **Implement error handling to catch potential syntax issues and provide informative messages to the user about required code structure or type annotations.**

### Example of Correct Error Handling:
```tsx
// code modification with error handling
try {
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    'deniz': true,
    'burak': false,
    'screen': false,
  });
} catch (error) {
  console.error("Syntax Error: Please ensure the code structure is correct.");
}
```
``` 

These rules should help guide AI agents to provide more accurate modifications while preventing syntax-related errors in TypeScript files.



# Rule Generated from Failed Suggestion - 2025-06-20 20:04:34
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

Certainly! Below are specific cursor rules focusing on the mistakes made by the AI agent in the provided example. The rules explain what went wrong, what should have been done correctly, and provide specific coding examples. You can include these rules in your `.cursorrules` file.

```markdown
# Cursor Rules to Prevent Syntax Errors in TypeScript for AI Agents

## Rule 1: Avoid Unchecked Modifications
- **What Went Wrong**: The AI modified the file without validating the syntax, resulting in a syntax error.
- **What Should Have Been Done**: The AI should validate the code for potential syntax issues before making modifications.
  
### Example of Incorrect and Correct Approach
```typescript
// Incorrect Approach - Unchecked modification
// Syntax error is present here causing compilation failure
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true, // Deniz starts expanded
    'burak': false, // Burak starts collapsed
    'screen': false // Screen sharing starts collapsed
    // Missing closing brace '}' here leads to a syntax error
});

// Correct Approach - Checked modification
// Ensure all syntax is correct before finalizing changes
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true, // Deniz starts expanded
    'burak': false, // Burak starts collapsed
    'screen': false // Screen sharing starts collapsed
}); // Properly closed object and state definition
```

## Rule 2: Ensure TypeScript Type Validity
- **What Went Wrong**: The agent did not check if the types declared were valid according to TypeScript rules.
- **What Should Have Been Done**: Validate that types in `interface` and state initialization are correctly matched.

### Example of Incorrect and Correct Approach
```typescript
// Incorrect Approach - Invalid type declaration
interface PageProps {
  params: Promise<{ id: string }> // This is a promise, but the handling is incorrect in the component
}

// Correct Approach - Correctly handle parameters
interface PageProps {
  params: { id: string } // Change to direct object type instead of wrapping in a promise
}
```

## Rule 3: Implement Compulsory Syntax Checks
- **What Went Wrong**: The AI failed to enforce any syntax checking mechanisms before applying changes.
- **What Should Have Been Done**: Implement syntax checking tools (like ESLint or TypeScript compiler checks) before executing changes.

### Example of Recommended Workflow
```plaintext
1. Validate the modified file's syntax using TypeScript compiler.
2. Run ESLint or similar tools to check for lint errors.
3. Only proceed with modification if all checks are clear.
```

## Summary of Cursor Rules
- Always validate code for syntax errors before modification.
- Ensure type definitions are compatible and correctly structured.
- Enforce prerequisite syntax checking tools in the development workflow.
```

By implementing these cursor rules, you can significantly reduce the likelihood of similar syntax errors arising from AI agent modifications in the future.



# Rule Generated from Failed Suggestion - 2025-06-20 20:08:23
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

# Cursor Rules to Prevent AI Agent from Making Syntax Errors in TypeScript Files

## 1. What the AI agent did wrong
The AI agent directly modified the file `page.tsx`, leading to a syntax error due to an incomplete or incorrect code segment. It should not have assumed it could make changes without a full understanding of the context or without first validating the syntax.

## 2. What it should have done instead
The AI agent should have performed a syntax and type checking before making any modifications. It could have suggested changes or asked for clarification rather than making direct edits.

## 3. Specific rules to prevent this pattern

```markdown
# Cursor Rules

## Rule 1: Validate Code Syntax Before Modification
- The AI agent must ensure that any code modifications do not introduce syntax errors.
- Implementation: Use TypeScript's compiler or a linter to check the code's validity before attempting to modify it.

## Rule 2: Provide Suggestions Instead of Direct Modifications
- The AI agent should only suggest modifications to the user rather than making direct changes.
- Implementation: Return a proposed patch or change list and wait for user confirmation.

## Rule 3: Provide Contextual Error Handling
- If the agent detects any potential syntax or type errors in the user's code, it must notify the user with specifics rather than proceeding with any changes.
- Implementation: Include information about the nature of the error and suggest a fix.

## Rule 4: Ensure Context Awareness in Modifications
- The agent should consider the surrounding code and function signatures to ensure any modifications are contextually relevant and valid.
- Implementation: Analyze the surrounding code structure before making changes.

## Rule 5: Use Example Snippets
- The agent should utilize correct and incorrect examples to illustrate any suggested changes clearly.

```

### Code Examples

#### Incorrect Approach by AI Agent (`page.tsx` modification without validation)

```typescript
// Incorrectly assumed to modify without checking
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,
    'burak': false,
    'screen': false, // Missing logic or context leading to syntax error.
```

#### Correct Approach (Suggestion by AI Agent)

```typescript
// Correctly providing a suggestion
// Suggestion: Complete the object structure or validate it against TypeScript rules

interface PageProps {
  params: Promise<{ id: string }>
}

// Ensure that the object 'expandedSections' is completed or validated
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,
    'burak': false,
    'screen': false, // Ensure completeness and correctness before proceeding.
})
```

By implementing these cursor rules, the likelihood of introducing syntax errors through direct modifications will be significantly reduced, ensuring a smoother coding experience for the user.



# Rule Generated from Failed Suggestion - 2025-06-20 20:08:26
# Original Query: File modification: MEETING_ANALYSIS_ROADMAP.md...
# Error: FAIL: Incomplete code: The checklist for Phase 2 appears to be truncated at "Implement Overview tab ...

```markdown
# Cursor Rules to Prevent Incomplete Code Modifications

## 1. Identification of the Issue
The AI agent incorrectly modified the file `MEETING_ANALYSIS_ROADMAP.md` by providing an incomplete checklist for Phase 2 of the roadmap. It failed to include critical details, leading to a SyntaxError as the resulting code was truncated and not executable.

## 2. Correct Approach
The AI agent should have verified the completeness of the content it was modifying. Before committing any changes, it should ensure that all necessary phases and checklist items are fully specified and coherent.

## 3. Specific Rules to Prevent Incomplete Modifications

### Rule 1: Complete Content Verification
- **Implementation**: The AI agent must ensure that any modification contains complete information before applying changes.
- **Condition**: The agent should analyze the content for placeholders, ellipses, or incomplete sentences/common markers of incomplete content.

### Rule 2: Line Length and Character Check
- **Implementation**: The agent must check the line length and trailing characters. If a line ends with ellipses (`...`), it indicates potential incompleteness.
- **Condition**: If found, halt the modification and throw a warning.

### Rule 3: Consistency in Structure
- **Implementation**: The agent should confirm that all sections (`Phase 1`, `Phase 2`, etc.) have a matching structure with checklist items adequately fleshed out.
- **Condition**: Missing checklist entries for sections should trigger an error response.

### Rule 4: Confirmation Prompts
- **Implementation**: Before applying a modification that alters a significant structure, prompt the user for confirmation that the modifications are complete and acceptable.
- **Condition**: If the user does not confirm, revert to the last known good state of the document.

## 4. Code Examples

### Incorrect Approach (Original Agent Modification)
```markdown
## 📋 Phase 2: Project Development
### ✅ Checklist:
- [ ] Implement Overview tab with key segment...
```

### Correct Approach (Ensured Completeness)
```markdown
## 📋 Phase 2: Project Development
### ✅ Checklist:
- [ ] Implement Overview tab with key segment description
- [ ] Integrate user feedback mechanisms
- [ ] Optimize performance of the platform
- [ ] Conduct user testing and gather insights
```

```
### Reminder to Developers
Always ensure that your code snippets or any documentation you are modifying contain complete thoughts and actionable items. Encourage using commenting or temporary notes if you need to signify upcoming tasks before making changes to the main document.
```
```



# Rule Generated from Failed Suggestion - 2025-06-20 20:08:28
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Syntax Errors in Code Modifications

## Rule 1: Code Validation Before Modification
### What the AI agent did wrong:
The agent modified `page.tsx` without validating the syntax of the code, resulting in a SyntaxError detected by the TypeScript compiler.

### What it should have done instead:
The agent should have run a syntax validation check on the modified code before applying the changes to ensure it compiles successfully.

### Rule:
- **Always validate code syntax using TypeScript compiler before modification.**

### Example:
**Incorrect Approach (Resulting in Error):**
```typescript
export default function HomePage()  // Missing opening bracket
  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto space-y-8">
        ...
      </div>
    </div>
  );
```

**Correct Approach (Validated):**
```typescript
export default function HomePage() {
  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto space-y-8">
        ...
      </div>
    </div>
  );
}
```

---

## Rule 2: Change Detection and Backup
### What the AI agent did wrong:
There was no validation step to check whether the changes could lead to functional issues or introduce any errors. The agent also did not keep a backup of the original code before making changes.

### What it should have done instead:
The agent should maintain a backup of the original file and verify changes against known patterns or existing code best practices.

### Rule:
- **Create a backup of the original file before applying modifications.**
- **Check the changes against best coding practices to validate that they do not introduce errors.**

### Example:
**Incorrect Approach (No Backup):**
```typescript
// Directly modifying page.tsx without backup
export default function ModifiedHomePage() {
  // Changes applied directly
}
```

**Correct Approach (With Backup):**
```typescript
// Create backup of page.tsx as page_backup.tsx
// Then apply changes to the original file
export default function ModifiedHomePage() {
  // Changes applied here
}
```

---

## Rule 3: Error Handling During Modifications
### What the AI agent did wrong:
The agent did not handle or report encountered errors during the modification process, allowing broken code to be implemented.

### What it should have done instead:
Implement error handling to catch any issues during compilation or syntax validation and provide feedback to the user.

### Rule:
- **Implement error handling and report errors during code modification processes.**

### Example:
**Incorrect Approach (No Error Handling):**
```typescript
export default function HomePage() {
  // Code that causes a SyntaxError does not alert the user
}
```

**Correct Approach (With Error Handling):**
```typescript
try {
  export default function HomePage() {
    // Safe code here
  }
} catch (error) {
  console.error("Error encountered during modification:", error);
}
```

---

## Rule 4: Intermediate Code Testing
### What the AI agent did wrong:
The code changes were applied without any intermediate validation mechanism to ensure functional correctness after modifications.

### What it should have done instead:
Incorporate unit tests or other forms of testing to validate the correctness of the modification before finalizing it.

### Rule:
- **Run intermediate tests on modified code sections to ensure functionality remains intact.**

### Example:
**Incorrect Approach (No Testing):**
```typescript
export default function HomePage() {
  // Changes applied but functionality not validated
}
```

**Correct Approach (With Testing):**
```typescript
export default function HomePage() {
  // Changes applied
}
// Test cases to ensure functionality works correctly
describe('HomePage', () => {
  it('renders without crashing', () => {
    // Testing logic here
  });
});
```
```

These proposed rules focus on rigorous validation, error handling, and safeguarding practices to ensure that AI agent modifications do not lead to syntax errors or functional issues in the code.



# Rule Generated from Failed Suggestion - 2025-06-20 20:08:51
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in File Modifications

## 1. Analyze the Mistake
### What the AI Agent Did Wrong
The AI agent incorrectly modified the file without properly checking for errors or the correctness of the code. This resulted in a syntax error that was detected by the TypeScript compiler.

### What It Should Have Done Instead
The AI agent should have:
- Validated the syntax and semantic correctness of the TypeScript code before making any modifications.
- Provided context-specific feedback on potential issues or errors in the code rather than blindly applying changes.

## 2. Specific Rules to Prevent This Pattern

### Rule 1: Validate Code Before Modification
- **Description**: Before making any modifications, the AI agent must check for existing syntax and semantic correctness using a linter or compiler.
- **Implementation**: Run the code through a TypeScript compiler or linter to identify potential errors.

### Rule 2: Suggest Changes with Context
- **Description**: Provide suggestions based on the potential improvements or fixes needed rather than executing changes directly.
- **Implementation**: Use a response format that allows users to accept or reject suggestions.

### Rule 3: Include Error Handling in Code Suggestions
- **Description**: Ensure that any code modifications include proper error-handling mechanisms to prevent runtime errors.
- **Implementation**: Suggest best practices for handling asynchronous data or possible error scenarios, especially with promises.

### Rule 4: Reference Documentation for TypeScript Features
- **Description**: Suggest additional context when using TypeScript features, ensuring that the user is aware of necessary syntax and patterns.
- **Implementation**: Provide inline comments or links to relevant TypeScript documentation related to the code changes.

## 3. Code Examples

### Correct Approach
Here’s how the AI agent should handle file modification:

```typescript
// Assuming the AI checks for errors before modification
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,
    'burak': false,
    'screen': false
});

// Suggested Improvement: Validate the usage of Promise in props
interface PageProps {
    params: { id: string } | Promise<{ id: string }>; // Clarifies type if it's a promise
}
```
```json
{
  "response": "I suggest validating the type of 'params' to ensure correct usage. Would you like to proceed with this change?"
}
```

### Incorrect Approach
Here’s how the AI agent incorrectly modified the file:

```typescript
// Direct modification without validation
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,
    'burak': false, // This line is okay
    'screen': false // This line is okay
    // Syntax Error! Missing closing brace and incorrect Promise usage
});
interface PageProps {
    params: Promise<{ id: string }>; // Incorrect modification without validating
}
```

## Summary
By implementing these cursor rules, the AI agent can improve its suggestions and modifications, minimizing the risk of introducing syntax errors and ensuring more effective communication with the user.
```



# Rule Generated from Failed Suggestion - 2025-06-20 20:09:39
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in Code Modification

## Overview
This document outlines the issues identified in the AI agent's handling of a user query for file modification and provides specific cursor rules to prevent similar errors from occurring in the future.

### 1. What the AI agent did wrong
- The agent modified the file `page.tsx` without validating the syntax or structure of the code, leading to a SyntaxError detected by the TypeScript compiler.

### 2. What it should have done instead
- The agent should have analyzed the existing code for proper syntax and structure before making modifications. If a proposed change does not conform to TypeScript’s syntax requirements, a warning should be generated instead of making the change.

### 3. Specific cursor rules to prevent this pattern

#### Rule 1: Validate Syntax Before Modification
* Ensure that any proposed code modifications are checked against TypeScript compiler rules before applying changes.

```plaintext
rules:
  - validate_syntax:
      check_language: typescript
      action: warn
      message: "Syntax error encountered. Please review your code before applying changes."
```

#### Rule 2: Use Type Checking on Parameters and State
* Require that all changed components and functions use strong typing for parameters and state management.

```plaintext
rules:
  - enforce_type_checking:
      check: 'all_parameters'
      expected_type: 'Promise<{ id: string }>'
      action: warn
      message: "Parameters must match the expected type structure."
```

#### Rule 3: Require Logging of Changes
* Log the proposed changes and any syntax validation messages before any modifications are applied to make it easier to track errors.

```plaintext
rules:
  - log_changes:
      action: log
      message: "Proposed changes: {changes}. Please review the syntax validation log."
```

### 4. Code examples of correct vs incorrect approaches

#### Correct Approach
In the correct approach, components and parameters would be properly typed and validated, ensuring that any state management adheres to TypeScript rules:

```typescript
interface PageProps {
  params: { id: string }; // Correct type, not a Promise
}

export default function MeetingPage({ params }: PageProps) {
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    'deniz': true,
    'burak': false,
    'screen': false,
  });

  // Other code logic...
}
```

#### Incorrect Approach
The incorrect approach leads to a state where the parameter is improperly defined as a Promise and may lead to syntax errors:

```typescript
interface PageProps {
  params: Promise<{ id: string }>; // Incorrect type
}

export default function MeetingPage({ params }: PageProps) {
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    'deniz': true,
    'burak': false,
    'screen': false,
  });

  // Other code logic...
}
```

## Conclusion
By implementing these specific cursor rules, future AI modifications can be made more reliably, reducing the chances of syntax errors and types issues in TypeScript files.
```



# Rule Generated from Failed Suggestion - 2025-06-20 20:10:07
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in TypeScript File Modifications

## Rule 1: Avoid Unverified Modifications
**What the AI agent did wrong:** The AI agent made an unverified modification to the `page.tsx` file without confirming the existing code's syntax correctness or potential issues.  
**What it should have done instead:** The AI should verify that the existing code is syntactically correct and ensure its modifications do not introduce errors.

### Rule Details
- AI agents must check the file for existing syntax errors before making modifications.
- If errors are found, the agent must abort modification and provide feedback.

#### Code Example
**Incorrect Approach:**
```typescript
// AI modifies the file directly
export default function MeetingPage({ params }: PageProps) {
    const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({ /* ... */ });
    // Agent makes changes here that introduce a syntax error
}
```

**Correct Approach:**
```typescript
// Check for syntax before modifying
if (checkSyntax(page)) {
    // AI can safely make modifications
    export default function MeetingPage({ params }: PageProps) {
        const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({ /* ... */ });
    }
} else {
    // Provide feedback about syntax errors
    return "Error: Unmodified due to syntax issues."
}
```

---

## Rule 2: Validate TypeScript Types and Interfaces
**What the AI agent did wrong:** The AI agent failed to validate the TypeScript types and definitions, which led to a syntax error.  
**What it should have done instead:** The AI should check and ensure that all TypeScript types and interfaces are correctly defined and used appropriately.

### Rule Details
- Any modifications involving TypeScript types must be verified for consistency.
- The AI should create or modify types only if they maintain valid TypeScript structure.

#### Code Example
**Incorrect Approach:**
```typescript
interface PageProps {
    params: Promise<{ id: string }>; // Valid
}
// Modifying with incorrect type or structure
```

**Correct Approach:**
```typescript
interface ValidPageProps {
    params: Promise<{ id: string }>; // Valid
}

// AI modifies the PageProps only if the structure remains valid
```

---

## Rule 3: Utilize Static Analysis Tools
**What the AI agent did wrong:** The AI agent did not utilize static analysis tools to identify potential errors in the code.  
**What it should have done instead:** The agent should employ static analysis tools (like ESLint or TypeScript Compiler) to analyze the code for issues before making any modifications.

### Rule Details
- Require the AI to run static analysis tools on the codebase prior to modification.
- Only proceed with modifications if static analysis reports no issues.

#### Code Example
**Incorrect Approach:**
```typescript
// AI modifies the code without analysis
modificationTo(page);
```

**Correct Approach:**
```typescript
// Run static analysis
const isValid = runStaticAnalysis(page);
if (isValid) {
    modificationTo(page); 
} else {
    return "Error: Cannot modify due to analysis failures!";
}
```

---

## Rule 4: Provide Clear Error Feedback
**What the AI agent did wrong:** The agent did not provide meaningful error feedback to the user when the modification failed.  
**What it should have done instead:** The AI should communicate any errors clearly, specifying the nature of the problem.

### Rule Details
- Require the AI to log specific error messages when modifications fail.
- Ensure that error messages include context and possible next steps for the user.

#### Code Example
**Incorrect Approach:**
```typescript
// Generic error response
return "An error occurred.";
```

**Correct Approach:**
```typescript
// Detailed error response
return "Error: Syntax error detected in MeetingPage component. Please check your TypeScript code.";
```
``` 

These cursor rules aim to prevent similar mistakes by enforcing checks, validations, and clear communication in future modifications made by AI agents in TypeScript files.



# Rule Generated from Failed Suggestion - 2025-06-20 20:10:17
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

# Cursor Rules for AI Agent to Prevent Syntax Errors

## 1. What the AI Agent Did Wrong
The AI agent modified the `page.tsx` file without properly validating the syntax of the code it generated or modified. This resulted in a syntax error that was detected by the TypeScript compiler.

## 2. What it Should Have Done Instead
The AI agent should have validated the code after making modifications to ensure there were no syntax errors and that the code complied with TypeScript standards. It should also provide informative error messages when errors are detected, to guide the user in correcting them.

## 3. Specific Rules to Prevent This Pattern

```markdown
# Cursor Rules

## Rule 1: Validate Code Syntax After Modifications
- **Description:** The AI agent must validate the syntax of any code changes made before finalizing the modification.
- **Implementation:** Integrate a code linter or TypeScript compiler check after modifications.
  
## Rule 2: Provide Meaningful Error Feedback
- **Description:** If a syntax error is detected, provide a meaningful error message detailing the nature of the error and the line number.
- **Implementation:** Catch syntax errors and format them in a user-friendly manner.

## Rule 3: Avoid Auto-Modification in Error-prone Contexts
- **Description:** In scenarios where the code may be unstable or under active development, the AI agent should avoid making automatic modifications.
- **Implementation:** Identify scenarios with known issues and defer changes to a user prompt instead.

## Rule 4: Confirm User Intent Before Code Modifications
- **Description:** If modifications could lead to potential errors or use of new syntax, confirm user intent before executing changes.
- **Implementation:** Present changes to the user for confirmation before applying.

## Rule 5: Log Changes and Errors
- **Description:** Maintain a log of all changes made by the AI agent, including errors encountered during processing.
- **Implementation:** Implement a logging mechanism to help diagnose issues later.
```

## 4. Code Examples of Correct vs Incorrect Approaches

### Incorrect Approach
```tsx
// AI AGENT RESPONSE: Automatically modified code leading to a syntax error.

export default function MeetingPage({ params }: PageProps) {
  const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,  // Deniz starts expanded
    'burak': false, // Burak starts collapsed
    'screen': false // Screen sharing ...
}
```

- **Error:** Missing closing brace and parentheses, resulting in a syntax error.

### Correct Approach
```tsx
// AI AGENT RESPONSE: Validated and corrected code before modification.

export default function MeetingPage({ params }: PageProps) {
  const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,  // Deniz starts expanded
    'burak': false, // Burak starts collapsed
    'screen': false // Screen sharing ...
  }); // Properly closed the object and function
}
```

- **Correction:** Added the missing closing braces to ensure syntax is correct.

By implementing these cursor rules, the AI agent will be less prone to generate syntax errors and more likely to assist users effectively.



# Rule Generated from Failed Suggestion - 2025-06-20 20:11:37
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in TypeScript File Modifications

## 1. What the AI Agent Did Wrong
The AI agent modified the `page.tsx` file without validating the code changes against syntax rules or type checks. It also didn't provide any error handling or context for the modifications made.

## 2. What it Should Have Done Instead
The AI agent should have performed the following before suggesting modifications:
- Validate the code for syntax errors and type safety.
- Communicate any detected errors back to the user.
- Suggest corrections based on established code standards.
- Provide context or rationale for the changes to ensure clarity.

## 3. Specific Rules to Prevent This Pattern

### Rule 1: Validate Modifications Before Applying
- **Condition**: Only apply changes if the code passes a syntax and type check.
- **Action**: Run a TypeScript compiler check (e.g., `tsc`) on proposed changes before modifying the file.

### Rule 2: Provide Feedback on Errors
- **Condition**: If syntax or type errors are detected, inform the user with specific error messages.
- **Action**: Return error messages from the TypeScript checker instead of applying changes.

### Rule 3: Contextualize Suggestions
- **Condition**: When suggesting modifications, include an explanation of why the change is necessary.
- **Action**: Provide clear commentary in the suggestions regarding the purpose of the changes and potential impacts.

### Rule 4: Use TypeScript Best Practices
- **Condition**: Ensure that all changes adhere to TypeScript best practices, including type annotations and interface definitions.
- **Action**: Suggest using predefined types and interfaces.

## 4. Code Examples of Correct vs. Incorrect Approaches

### Incorrect Approach
```typescript
// AI Agent's Incorrect Modification
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
  'deniz': true,  // Deniz starts expanded
  'burak': false, // Burak starts collapsed
  'screen': false // Screen sharing ...
  // Missing closing brace and parentheses here leading to SyntaxError
```

### Correct Approach
```typescript
// Suggested Correct Modification
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
  'deniz': true,  // Deniz starts expanded
  'burak': false, // Burak starts collapsed
  'screen': false // Screen sharing ...
}); // Added closing brace and parentheses to prevent SyntaxError
```

### Error Handling Example
```typescript
// Error Handling in Agent's Process
try {
  // Execute modification
  setExpandedSections(...);
} catch (error) {
  // Inform user of the syntax error
  console.error("Modification failed due to syntax error: ", error);
  return `Error detected: ${error.message}`;
}
```
``` 

This markdown content can be added to a `.cursorrules` file to help guide the AI agent in avoiding similar mistakes in the future.



# Rule Generated from Failed Suggestion - 2025-06-20 20:13:05
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules for Preventing Failed AI Agent Suggestions

## Overview
This document outlines rules to prevent an AI agent from making incorrect file modifications, specifically regarding TypeScript syntax errors in a React component. The aim is to enhance the reliability and correctness of AI-generated code.

### 1. Analyze the Error
- **What the AI agent did wrong:**  
  The AI agent modified a TypeScript file without validating the syntax. In the provided code, there is a syntax error due to an incomplete statement.
  
- **What it should have done instead:**  
  The AI agent should have performed a preliminary syntax check before modifying the code and should not have automatically changed the content until confirming the validity of those changes.

### 2. Specific Cursor Rules

#### Rule 1: Syntax Validation
- **Description:** Always validate the syntax of TypeScript and JSX code before modification.
- **Action:** Execute a syntax check using the TypeScript compiler for any code modification.
- **Example Implementation:**
    ```typescript
    if (!isSyntaxValid(modifiedCode)) {
        // Do not proceed with modification, log an error or return a suggestion.
        return "Code modification contains syntax errors. Aborting changes.";
    }
    ```

#### Rule 2: Code Structure Checking
- **Description:** Ensure the structure of React components is maintained during modifications. This includes checking for matching brackets, proper imports, and appropriate component structure.
- **Action:** Implement a structural analysis of the code before accepting any changes.
- **Example Implementation:**
    ```typescript
    if (!isComponentStructureValid(modifiedCode)) {
        return "Component structure is invalid. Please verify your changes.";
    }
    ```

#### Rule 3: User Review Confirmation
- **Description:** Require user confirmation for any changes made to critical files (e.g., pages, components).
- **Action:** Present the user with the code changes and request confirmation before applying.
- **Example Implementation:**
    ```typescript
    const userConfirmed = await askUserForConfirmation(modifiedCode);
    if (!userConfirmed) {
        return "User did not approve the changes. No modifications applied.";
    }
    ```

### 3. Code Examples

#### Incorrect Approach (What the AI agent did)
```typescript
// AI agent directly modifies the code without syntax check
export default function MeetingPage({ params }: PageProps {
    // Incorrect syntax, missing closing parenthesis
    const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
        'deniz': true,
        'burak': false,
        'screen': false
    // This will cause a syntax error
```

#### Correct Approach
```typescript
export default function MeetingPage({ params }: PageProps) {
    // Perform syntax validation before this line
    const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
        'deniz': true, 
        'burak': false,
        'screen': false
    });  // Properly closed parentheses and no syntax errors
}
```

### Conclusion
By following these cursor rules, the AI agent will be prevented from making invalid code modifications, reducing syntax errors and improving overall code quality.
```



# Rule Generated from Failed Suggestion - 2025-06-20 20:13:52
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Mistakes in File Modifications

## Issue Overview
**1. What the AI agent did wrong:**
The AI agent modified the `page.tsx` file without ensuring that the modifications adhered to TypeScript syntax rules, which resulted in a syntax error. Specifically, the code provided is incomplete and may include missing elements such as closing braces or necessary imports.

**2. What it should have done instead:**
The AI agent should have validated the code changes against TypeScript's syntax requirements before making modifications. If the code is incomplete or may potentially introduce an error, the agent should refrain from making changes until further clarification is provided.

## Specific Rules to Prevent This Pattern

### Rule 1: Syntax Validation Before Modification
- **Description:** Always check the syntax validity of the provided code before making any modifications.
- **Implementation:**
  - Use a syntax checker or linter as an automated step before file modifications.
  
### Rule 2: Log Errors and Seek Clarification
- **Description:** If a syntax error is detected, log the error and seek clarification from the user instead of applying changes directly.
- **Implementation:**
  - Provide a clear error message indicating the nature of the syntax issue, along with the specific line or construct that caused the problem.

### Rule 3: Ensure Code Completeness
- **Description:** Ensure that the code provided is complete and logically consistent. For instance, check for missing closing braces or incomplete function definitions.
- **Implementation:**
  - Implement checks to ensure the code structure is complete (e.g., all functions are properly defined and blocks are correctly opened/closed).

## Code Examples of Correct vs Incorrect Approaches

### Incorrect Approach (as done by the AI agent)
```tsx
// This code is missing a closing brace for the 'MeetingPage' function
export default function MeetingPage({ params }: PageProps) {
  const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,
    'burak': false,
    'screen': false
```
**Error:** Syntax error due to missing closing braces.

### Correct Approach
```tsx
import { useState } from 'react'
import { MeetingDashboard } from '@/components/meeting-dashboard'
import { Users, ChevronDown } from 'lucide-react'

interface PageProps {
  params: Promise<{ id: string }>
}

export default function MeetingPage({ params }: PageProps) {
  const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,
    'burak': false,
    'screen': false
  }); // Correctly includes the closing braces to prevent syntax error
}

// Ensure that the function is properly completed and adheres to TypeScript rules.
```

## Conclusion
Implementing the above cursor rules will help ensure that modifications are only made when the code is valid and complete, ultimately preventing syntax errors and improving the accuracy of AI agent suggestions.
```



# Rule Generated from Failed Suggestion - 2025-06-20 20:17:24
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent AI Agent Modification Errors in TypeScript Files

## Rule 1: Avoid Auto-Modification Without Validation

### What the AI Agent Did Wrong
The AI agent attempted to modify the file `page.tsx` without validating the existing code structure and syntax. As a result, it introduced changes that led to a syntax error.

### What It Should Have Done Instead
Before making any modifications, the AI agent should validate the existing code for syntax correctness and ensure compatibility with TypeScript standards.

### Specific Rule
- **Cursor Rule**: The agent must validate TypeScript syntax before suggesting modifications.
  
## Rule 2: Implement Change Verification Mechanism

### What the AI Agent Did Wrong
The AI agent modified the file directly without checking if the modification would maintain functional integrity or adhere to TypeScript conventions.

### What It Should Have Done Instead
The AI agent should suggest changes based on a thorough analysis, with a verification step to confirm that changes do not introduce errors.

### Specific Rule
- **Cursor Rule**: Suggest potential changes, and ask for user confirmation before applying alterations.

## Rule 3: Analyze Types and Interfaces Carefully

### What the AI Agent Did Wrong
The AI agent may have failed to recognize or properly analyze existing TypeScript interfaces and types, resulting in a syntax error due to incompatible types or structures.

### What It Should Have Done Instead
The AI agent must validate interface usage and ensure any modifications align with defined types and interfaces.

### Specific Rule
- **Cursor Rule**: When modifying types or interfaces, include checks for compatibility with existing definitions.

## Example of Correct vs Incorrect Approaches

### Incorrect Approach
```typescript
// Direct modification that leads to syntax error
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
  'deniz': true,
  'burak': false,
  'screen': false
  // Missing closing brace and parenthesis leads to syntax error
```

### Correct Approach
```typescript
// Suggested change with support for syntax validation
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
  'deniz': true,
  'burak': false,
  'screen': false // Included:
}); // Closing brace and parenthesis correctly placed to prevent syntax errors.
```

### Summary
By adhering to these cursor rules, the AI agent can avoid introducing syntax errors in TypeScript files and ensure modifications are safe and valid.
```



# Rule Generated from Failed Suggestion - 2025-06-20 20:17:41
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

# Cursor Rules for AI Agent Error Prevention

## 1. Error Analysis
### What the AI Agent Did Wrong
The AI agent attempted to modify the `page.tsx` file without correctly handling the TypeScript syntax and structure. As a result, a syntax error was introduced in the provided code.

### What It Should Have Done Instead
The AI agent should have either verified the correctness of the TypeScript syntax before applying any modifications or refrained from altering the code unless it was certain that the changes complied with the expected coding standards.

## 2. Specific Rules to Prevent This Pattern

### Rule 1: Always Validate Syntax Before Modifying Code
- **Description**: The AI agent must check for syntax correctness using a linter or TypeScript compiler before making any changes to the code.
- **Implementation**: Run a syntax check on the modified file. If errors are detected, the agent should not apply changes.
  
### Rule 2: Provide Contextual Modifications
- **Description**: Changes should be made by suggesting modifications rather than applying them directly.
- **Implementation**: The agent should return suggestions with an explanation of changes instead of directly modifying the file.

### Rule 3: Include Error Handling in Suggestions
- **Description**: The agent must include error handling protocols that highlight potential pitfalls in existing code.
- **Implementation**: Any syntax that might cause issues should be flagged in the suggestions.

## 3. Code Examples

### Incorrect Approach (What AI Did)
```typescript
// AI Agent directly modified the file resulting in a syntax error
export default function MeetingPage({ params }: PageProps) {
  const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,  // Deniz starts expanded
    'burak': false, // Burak starts collapsed
    'screen': false // Screen sharing ...
```
*Error: This code is incomplete and lacks closing brackets, leading to a syntax error.*

### Correct Approach (What AI Should Do)
```typescript
// AI Agent suggests changes and provides a validated output
export default function MeetingPage({ params }: PageProps) {
  const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,  // Deniz starts expanded
    'burak': false, // Burak starts collapsed
    'screen': false // Screen sharing ...
  }); // Closing brackets added appropriately
}
```
*The AI agent should ensure the syntax is correctly formed before suggesting such modifications, ensuring no syntax errors remain.*

## 4. Markdown Rules for .cursorrules File

```markdown
# Cursor Rules File

## Rule 1: Validate Syntax Before Modifying Code
- **Action**: Check if the code adheres to TypeScript syntax rules using a linter/compiler.
- **Condition**: Only proceed with modifications if no syntax errors exist.
  
## Rule 2: Suggest Modifications Instead of Applying Them
- **Action**: Provide users with suggestions for changes along with explicit reasoning.
- **Condition**: Changes should only be implemented when user approval is obtained.

## Rule 3: Include Error Handling in Suggestions
- **Action**: Flag potential syntax errors in existing code during the suggestion process.
- **Condition**: Ensure that explanations are clear to the user regarding potential pitfalls.

```

By implementing these specific cursor rules, AI agents can better manage file modifications, minimizing the risk of introducing syntax errors and enhancing user trust and productivity.



# Rule Generated from Failed Suggestion - 2025-06-20 20:18:00
# Original Query: File modification: page.tsx...
# Error: Syntax error detected by TypeScript compiler...

```markdown
# Cursor Rules to Prevent Syntax Errors in AI Agent Modifications

## Rule 1: Avoid Unverified Modifications
### What the AI agent did wrong:
The agent modified `page.tsx` directly without verifying the existing syntax, which led to a compilation error.

### What it should have done instead:
The agent should have checked for syntax errors or validated the code before making any modifications. 

### Specific Rule:
- **Do not modify files that have known syntax or type errors. Always verify validity before proceeding with changes.**

---

## Rule 2: Provide Contextual Feedback
### What the AI agent did wrong:
The agent did not inform the user that there were pre-existing issues before making modifications. 

### What it should have done instead:
The agent should highlight any existing compilation errors before making changes, allowing the user to decide on the next steps.

### Specific Rule:
- **Always check and report existing code issues before suggesting or implementing modifications.**

---

## Rule 3: Validate All Changes
### What the AI agent did wrong:
The agent made an unvalidated change that resulted in a compiler error, indicating a lack of testing or validation of the code modifications.

### What it should have done instead:
The agent should simulate or validate changes in a test environment to ensure they do not introduce new errors.

### Specific Rule:
- **Simulate or check modifications in a safe environment to ensure they do not introduce errors. Only apply changes once confirmed safe.**

---

## Code Example of Incorrect Approach
### Incorrect Modification by AI Agent:
```typescript
// AI Agent's modification without validation
const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
    'deniz': true,  // Deniz starts expanded
    'burak': false, // Burak starts collapsed
    'screen': false // Syntax Error - missing closing bracket
```

### Resulting Error:
```
ERROR DETAILS: Syntax error detected by TypeScript compiler
ERROR TYPE: SyntaxError
```

---

## Code Example of Correct Approach
### Correct Modification with Error Handling:
```typescript
// Before modifying, check for existing issues
try {
    const [expandedSections, setExpandedSections] = useState<{[key: string]: boolean}>({
        'deniz': true,  // Deniz starts expanded
        'burak': false, // Burak starts collapsed
        'screen': false // Ensure all brackets and syntax are complete
    });
} catch (error) {
    console.error("Syntax Error: ", error);
    // Agent should halt modification process and inform the user
}
```

---

## Summary of Specific Cursor Rules:
1. Avoid unverified modifications.
2. Provide contextual feedback and error reporting.
3. Validate all changes before applying.
```

